ARM GAS  /tmp/ccpbiI8S.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_can.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_CAN_MspInit,"ax",%progbits
  18              		.align	1
  19              		.weak	HAL_CAN_MspInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_CAN_MspInit:
  26              	.LFB128:
  27              		.file 1 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c"
   1:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @file    stm32f4xx_hal_can.c
   4:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Configuration functions
  10:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Control functions
  11:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Interrupts management
  12:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Callbacks functions
  13:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
  15:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   @verbatim
  16:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
  17:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                         ##### How to use this driver #####
  18:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
  19:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
  20:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
  21:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_MspInit():
  22:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  23:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****          (++) Configure CAN pins
  24:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  25:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Configure CAN pins as alternate function open-drain
  26:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  27:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  28:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  29:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
  30:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
  31:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccpbiI8S.s 			page 2


  32:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  33:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
  34:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  35:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  36:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           functions:
  37:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  38:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  39:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  40:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  41:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           messages.
  42:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  43:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  44:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           can be used:
  45:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  46:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  message.
  47:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  48:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  message.
  49:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  50:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  mailboxes.
  51:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  52:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  in a Tx mailbox.
  53:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  54:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  55:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  56:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  57:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  58:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  59:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           stored in the Rx Fifo.
  60:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  61:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  62:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  63:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  64:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  65:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  66:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *** Polling mode operation ***
  67:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       ==============================
  68:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
  69:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Reception:
  70:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  71:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  until at least one message is received.
  72:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  73:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  74:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Transmission:
  75:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
  76:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
  77:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Then request transmission of a message using
  78:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  79:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  80:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  81:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *** Interrupt mode operation ***
  82:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       ================================
  83:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
  84:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  85:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           function. Then, the process can be controlled through the
  86:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
  87:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
  88:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccpbiI8S.s 			page 3


  89:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Notifications can be deactivated using
  90:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
  91:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  92:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
  93:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
  94:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
  95:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
  96:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           here.
  97:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
  98:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
  99:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  read, the notification can be activated again.
 103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *** Sleep mode ***
 106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       ==================
 107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
 108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           be completed.
 112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           will be entered.
 115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) The wake-up from sleep mode can be trigged by two ways:
 124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  if automatic wake up mode is enabled.
 128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   @endverbatim
 130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ******************************************************************************
 131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @attention
 132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * Redistribution and use in source and binary forms, with or without modification,
 136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * are permitted provided that the following conditions are met:
 137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      this list of conditions and the following disclaimer.
 139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      this list of conditions and the following disclaimer in the documentation
 141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      and/or other materials provided with the distribution.
 142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      may be used to endorse or promote products derived from this software
 144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      without specific prior written permission.
 145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
ARM GAS  /tmp/ccpbiI8S.s 			page 4


 146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ******************************************************************************
 158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #include "stm32f4xx_hal.h"
 162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @addtogroup STM32F4xx_HAL_Driver
 164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if defined(CAN1)
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN CAN
 170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief CAN driver modules
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif
 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
 188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Initialization and Configuration functions
 200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
 202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
ARM GAS  /tmp/ccpbiI8S.s 			page 5


 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
 208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan == NULL)
 228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check the parameters */
 233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
 250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Exit from sleep mode */
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Get tick */
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   tickstart = HAL_GetTick();
 257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
ARM GAS  /tmp/ccpbiI8S.s 			page 6


 260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Update error code */
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Change CAN state */
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_ERROR;
 270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Request initialisation */
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Get tick */
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   tickstart = HAL_GetTick();
 278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Wait initialisation acknowledge */
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Update error code */
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Change CAN state */
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_ERROR;
 291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the time triggered communication mode */
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the automatic bus-off management */
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the automatic wake-up mode */
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
 316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
ARM GAS  /tmp/ccpbiI8S.s 			page 7


 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the automatic retransmission */
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the transmit FIFO priority */
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the bit timing register */
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Initialize the error code */
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Initialize the CAN state */
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return function status */
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return HAL_OK;
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
 373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         reset values.
ARM GAS  /tmp/ccpbiI8S.s 			page 8


 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan == NULL)
 382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check the parameters */
 387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Stop the CAN module */
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_Stop(hcan);
 391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Reset the CAN peripheral */
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Change CAN state */
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return function status */
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return HAL_OK;
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
 413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
  28              		.loc 1 415 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
 416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
 422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
  34              		.loc 1 422 0
  35 0000 7047     		bx	lr
ARM GAS  /tmp/ccpbiI8S.s 			page 9


  36              		.cfi_endproc
  37              	.LFE128:
  39              		.section	.text.HAL_CAN_Init,"ax",%progbits
  40              		.align	1
  41              		.global	HAL_CAN_Init
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv4-sp-d16
  47              	HAL_CAN_Init:
  48              	.LFB126:
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
  49              		.loc 1 223 0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53              	.LVL1:
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
  54              		.loc 1 227 0
  55 0000 0028     		cmp	r0, #0
  56 0002 00F0A180 		beq	.L21
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
  57              		.loc 1 223 0
  58 0006 38B5     		push	{r3, r4, r5, lr}
  59              	.LCFI0:
  60              		.cfi_def_cfa_offset 16
  61              		.cfi_offset 3, -16
  62              		.cfi_offset 4, -12
  63              		.cfi_offset 5, -8
  64              		.cfi_offset 14, -4
  65 0008 0446     		mov	r4, r0
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
  66              		.loc 1 246 0
  67 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
  68 000e D3B1     		cbz	r3, .L26
  69              	.LVL2:
  70              	.L4:
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  71              		.loc 1 253 0
  72 0010 2268     		ldr	r2, [r4]
  73 0012 1368     		ldr	r3, [r2]
  74 0014 23F00203 		bic	r3, r3, #2
  75 0018 1360     		str	r3, [r2]
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  76              		.loc 1 256 0
  77 001a FFF7FEFF 		bl	HAL_GetTick
  78              	.LVL3:
  79 001e 0546     		mov	r5, r0
  80              	.LVL4:
  81              	.L5:
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
  82              		.loc 1 259 0
  83 0020 2368     		ldr	r3, [r4]
  84 0022 5A68     		ldr	r2, [r3, #4]
  85 0024 12F0020F 		tst	r2, #2
  86 0028 10D0     		beq	.L27
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
ARM GAS  /tmp/ccpbiI8S.s 			page 10


  87              		.loc 1 261 0
  88 002a FFF7FEFF 		bl	HAL_GetTick
  89              	.LVL5:
  90 002e 401B     		subs	r0, r0, r5
  91 0030 0A28     		cmp	r0, #10
  92 0032 F5D9     		bls	.L5
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  93              		.loc 1 264 0
  94 0034 636A     		ldr	r3, [r4, #36]
  95 0036 43F40033 		orr	r3, r3, #131072
  96 003a 6362     		str	r3, [r4, #36]
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  97              		.loc 1 267 0
  98 003c 0523     		movs	r3, #5
  99 003e 84F82030 		strb	r3, [r4, #32]
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 100              		.loc 1 269 0
 101 0042 0120     		movs	r0, #1
 102              	.L3:
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 103              		.loc 1 369 0
 104 0044 38BD     		pop	{r3, r4, r5, pc}
 105              	.LVL6:
 106              	.L26:
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 107              		.loc 1 249 0
 108 0046 FFF7FEFF 		bl	HAL_CAN_MspInit
 109              	.LVL7:
 110 004a E1E7     		b	.L4
 111              	.LVL8:
 112              	.L27:
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 113              		.loc 1 274 0
 114 004c 1A68     		ldr	r2, [r3]
 115 004e 42F00102 		orr	r2, r2, #1
 116 0052 1A60     		str	r2, [r3]
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 117              		.loc 1 277 0
 118 0054 FFF7FEFF 		bl	HAL_GetTick
 119              	.LVL9:
 120 0058 0546     		mov	r5, r0
 121              	.LVL10:
 122              	.L7:
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 123              		.loc 1 280 0
 124 005a 2368     		ldr	r3, [r4]
 125 005c 5A68     		ldr	r2, [r3, #4]
 126 005e 12F0010F 		tst	r2, #1
 127 0062 0DD1     		bne	.L28
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 128              		.loc 1 282 0
 129 0064 FFF7FEFF 		bl	HAL_GetTick
 130              	.LVL11:
 131 0068 401B     		subs	r0, r0, r5
 132 006a 0A28     		cmp	r0, #10
 133 006c F5D9     		bls	.L7
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccpbiI8S.s 			page 11


 134              		.loc 1 285 0
 135 006e 636A     		ldr	r3, [r4, #36]
 136 0070 43F40033 		orr	r3, r3, #131072
 137 0074 6362     		str	r3, [r4, #36]
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 138              		.loc 1 288 0
 139 0076 0523     		movs	r3, #5
 140 0078 84F82030 		strb	r3, [r4, #32]
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 141              		.loc 1 290 0
 142 007c 0120     		movs	r0, #1
 143 007e E1E7     		b	.L3
 144              	.L28:
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 145              		.loc 1 295 0
 146 0080 227E     		ldrb	r2, [r4, #24]	@ zero_extendqisi2
 147 0082 012A     		cmp	r2, #1
 148 0084 3DD0     		beq	.L29
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 149              		.loc 1 301 0
 150 0086 1A68     		ldr	r2, [r3]
 151 0088 22F08002 		bic	r2, r2, #128
 152 008c 1A60     		str	r2, [r3]
 153              	.L10:
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 154              		.loc 1 305 0
 155 008e 637E     		ldrb	r3, [r4, #25]	@ zero_extendqisi2
 156 0090 012B     		cmp	r3, #1
 157 0092 3BD0     		beq	.L30
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 158              		.loc 1 311 0
 159 0094 2268     		ldr	r2, [r4]
 160 0096 1368     		ldr	r3, [r2]
 161 0098 23F04003 		bic	r3, r3, #64
 162 009c 1360     		str	r3, [r2]
 163              	.L12:
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 164              		.loc 1 315 0
 165 009e A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 166 00a0 012B     		cmp	r3, #1
 167 00a2 39D0     		beq	.L31
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 168              		.loc 1 321 0
 169 00a4 2268     		ldr	r2, [r4]
 170 00a6 1368     		ldr	r3, [r2]
 171 00a8 23F02003 		bic	r3, r3, #32
 172 00ac 1360     		str	r3, [r2]
 173              	.L14:
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 174              		.loc 1 325 0
 175 00ae E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 176 00b0 012B     		cmp	r3, #1
 177 00b2 37D0     		beq	.L32
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 178              		.loc 1 331 0
 179 00b4 2268     		ldr	r2, [r4]
 180 00b6 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccpbiI8S.s 			page 12


 181 00b8 43F01003 		orr	r3, r3, #16
 182 00bc 1360     		str	r3, [r2]
 183              	.L16:
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 184              		.loc 1 335 0
 185 00be 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 186 00c0 012B     		cmp	r3, #1
 187 00c2 35D0     		beq	.L33
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 188              		.loc 1 341 0
 189 00c4 2268     		ldr	r2, [r4]
 190 00c6 1368     		ldr	r3, [r2]
 191 00c8 23F00803 		bic	r3, r3, #8
 192 00cc 1360     		str	r3, [r2]
 193              	.L18:
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 194              		.loc 1 345 0
 195 00ce 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 196 00d0 012B     		cmp	r3, #1
 197 00d2 33D0     		beq	.L34
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 198              		.loc 1 351 0
 199 00d4 2268     		ldr	r2, [r4]
 200 00d6 1368     		ldr	r3, [r2]
 201 00d8 23F00403 		bic	r3, r3, #4
 202 00dc 1360     		str	r3, [r2]
 203              	.L20:
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 204              		.loc 1 355 0
 205 00de A368     		ldr	r3, [r4, #8]
 206 00e0 E268     		ldr	r2, [r4, #12]
 207 00e2 1343     		orrs	r3, r3, r2
 208 00e4 2269     		ldr	r2, [r4, #16]
 209 00e6 1343     		orrs	r3, r3, r2
 210 00e8 6269     		ldr	r2, [r4, #20]
 211 00ea 1343     		orrs	r3, r3, r2
 212 00ec 6268     		ldr	r2, [r4, #4]
 213 00ee 013A     		subs	r2, r2, #1
 214 00f0 2168     		ldr	r1, [r4]
 215 00f2 1343     		orrs	r3, r3, r2
 216 00f4 CB61     		str	r3, [r1, #28]
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 217              		.loc 1 362 0
 218 00f6 0020     		movs	r0, #0
 219 00f8 6062     		str	r0, [r4, #36]
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 220              		.loc 1 365 0
 221 00fa 0123     		movs	r3, #1
 222 00fc 84F82030 		strb	r3, [r4, #32]
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 223              		.loc 1 368 0
 224 0100 A0E7     		b	.L3
 225              	.L29:
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 226              		.loc 1 297 0
 227 0102 1A68     		ldr	r2, [r3]
 228 0104 42F08002 		orr	r2, r2, #128
ARM GAS  /tmp/ccpbiI8S.s 			page 13


 229 0108 1A60     		str	r2, [r3]
 230 010a C0E7     		b	.L10
 231              	.L30:
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 232              		.loc 1 307 0
 233 010c 2268     		ldr	r2, [r4]
 234 010e 1368     		ldr	r3, [r2]
 235 0110 43F04003 		orr	r3, r3, #64
 236 0114 1360     		str	r3, [r2]
 237 0116 C2E7     		b	.L12
 238              	.L31:
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 239              		.loc 1 317 0
 240 0118 2268     		ldr	r2, [r4]
 241 011a 1368     		ldr	r3, [r2]
 242 011c 43F02003 		orr	r3, r3, #32
 243 0120 1360     		str	r3, [r2]
 244 0122 C4E7     		b	.L14
 245              	.L32:
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 246              		.loc 1 327 0
 247 0124 2268     		ldr	r2, [r4]
 248 0126 1368     		ldr	r3, [r2]
 249 0128 23F01003 		bic	r3, r3, #16
 250 012c 1360     		str	r3, [r2]
 251 012e C6E7     		b	.L16
 252              	.L33:
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 253              		.loc 1 337 0
 254 0130 2268     		ldr	r2, [r4]
 255 0132 1368     		ldr	r3, [r2]
 256 0134 43F00803 		orr	r3, r3, #8
 257 0138 1360     		str	r3, [r2]
 258 013a C8E7     		b	.L18
 259              	.L34:
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 260              		.loc 1 347 0
 261 013c 2268     		ldr	r2, [r4]
 262 013e 1368     		ldr	r3, [r2]
 263 0140 43F00403 		orr	r3, r3, #4
 264 0144 1360     		str	r3, [r2]
 265 0146 CAE7     		b	.L20
 266              	.LVL12:
 267              	.L21:
 268              	.LCFI1:
 269              		.cfi_def_cfa_offset 0
 270              		.cfi_restore 3
 271              		.cfi_restore 4
 272              		.cfi_restore 5
 273              		.cfi_restore 14
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 274              		.loc 1 229 0
 275 0148 0120     		movs	r0, #1
 276              	.LVL13:
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 277              		.loc 1 369 0
 278 014a 7047     		bx	lr
ARM GAS  /tmp/ccpbiI8S.s 			page 14


 279              		.cfi_endproc
 280              	.LFE126:
 282              		.section	.text.HAL_CAN_MspDeInit,"ax",%progbits
 283              		.align	1
 284              		.weak	HAL_CAN_MspDeInit
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 288              		.fpu fpv4-sp-d16
 290              	HAL_CAN_MspDeInit:
 291              	.LFB129:
 423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
 429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 292              		.loc 1 431 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              		@ link register save eliminated.
 297              	.LVL14:
 432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 298              		.loc 1 438 0
 299 0000 7047     		bx	lr
 300              		.cfi_endproc
 301              	.LFE129:
 303              		.section	.text.HAL_CAN_ConfigFilter,"ax",%progbits
 304              		.align	1
 305              		.global	HAL_CAN_ConfigFilter
 306              		.syntax unified
 307              		.thumb
 308              		.thumb_func
 309              		.fpu fpv4-sp-d16
 311              	HAL_CAN_ConfigFilter:
 312              	.LFB130:
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
 443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Configuration functions.
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
 448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
ARM GAS  /tmp/ccpbiI8S.s 			page 15


 450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****               ##### Configuration functions #####
 451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
 456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         contains the filter configuration information.
 466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 313              		.loc 1 469 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317              		@ link register save eliminated.
 318              	.LVL15:
 470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t filternbrbitpos = 0U;
 471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 319              		.loc 1 473 0
 320 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 321 0004 DBB2     		uxtb	r3, r3
 322 0006 012B     		cmp	r3, #1
 323 0008 0AD0     		beq	.L37
 474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 324              		.loc 1 474 0 discriminator 1
 325 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 326 000e DBB2     		uxtb	r3, r3
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 327              		.loc 1 473 0 discriminator 1
 328 0010 022B     		cmp	r3, #2
 329 0012 05D0     		beq	.L37
 475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the parameters */
 477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
 485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if defined(CAN3)
 487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the CAN instance */
 488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (hcan->Instance == CAN3)
ARM GAS  /tmp/ccpbiI8S.s 			page 16


 489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* CAN3 is single instance with 14 dedicated filters banks */
 491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check the parameters */
 493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
 496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Select master instance to access the filter banks */
 499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip = CAN1;
 500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check the parameters */
 502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #elif defined(CAN2)
 506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Select master instance to access the filter banks */
 508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     can_ip = CAN1;
 509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the parameters */
 511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
 514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* CAN1 is single instance with 14 dedicated filters banks */
 515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the parameters */
 517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif
 519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Initialisation mode for the filter */
 521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if defined(CAN3)
 524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the CAN instance */
 525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (can_ip == CAN1)
 526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Select the start filter number of CAN2 slave instance */
 528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #elif defined(CAN2)
 533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Select the start filter number of CAN2 slave instance */
 534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif
 538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Convert filter number into bit position */
 539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter Deactivation */
 542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter Scale */
 545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
ARM GAS  /tmp/ccpbiI8S.s 			page 17


 546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 16-bit scale for the filter */
 548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 32-bit scale for the filter */
 566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter Mode */
 580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Identifier list mode for the filter*/
 588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter FIFO assignment */
 592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
 595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
 598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccpbiI8S.s 			page 18


 603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter activation */
 604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterActivation == ENABLE)
 605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 330              		.loc 1 618 0
 331 0014 436A     		ldr	r3, [r0, #36]
 332 0016 43F48023 		orr	r3, r3, #262144
 333 001a 4362     		str	r3, [r0, #36]
 619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 334              		.loc 1 620 0
 335 001c 0120     		movs	r0, #1
 336              	.LVL16:
 621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 337              		.loc 1 622 0
 338 001e 7047     		bx	lr
 339              	.LVL17:
 340              	.L37:
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t filternbrbitpos = 0U;
 341              		.loc 1 469 0
 342 0020 70B4     		push	{r4, r5, r6}
 343              	.LCFI2:
 344              		.cfi_def_cfa_offset 12
 345              		.cfi_offset 4, -12
 346              		.cfi_offset 5, -8
 347              		.cfi_offset 6, -4
 348              	.LVL18:
 521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 349              		.loc 1 521 0
 350 0022 424B     		ldr	r3, .L52
 351 0024 D3F80022 		ldr	r2, [r3, #512]
 352 0028 42F00102 		orr	r2, r2, #1
 353 002c C3F80022 		str	r2, [r3, #512]
 534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 354              		.loc 1 534 0
 355 0030 D3F80022 		ldr	r2, [r3, #512]
 356 0034 22F47C52 		bic	r2, r2, #16128
 357 0038 C3F80022 		str	r2, [r3, #512]
 535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 358              		.loc 1 535 0
 359 003c D3F80022 		ldr	r2, [r3, #512]
 360 0040 486A     		ldr	r0, [r1, #36]
 361              	.LVL19:
 362 0042 42EA0022 		orr	r2, r2, r0, lsl #8
ARM GAS  /tmp/ccpbiI8S.s 			page 19


 363 0046 C3F80022 		str	r2, [r3, #512]
 539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 364              		.loc 1 539 0
 365 004a 4A69     		ldr	r2, [r1, #20]
 366 004c 0120     		movs	r0, #1
 367 004e 00FA02F2 		lsl	r2, r0, r2
 368              	.LVL20:
 542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 369              		.loc 1 542 0
 370 0052 D3F81C42 		ldr	r4, [r3, #540]
 371 0056 D043     		mvns	r0, r2
 372 0058 0440     		ands	r4, r4, r0
 373 005a C3F81C42 		str	r4, [r3, #540]
 545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 374              		.loc 1 545 0
 375 005e CB69     		ldr	r3, [r1, #28]
 376 0060 B3B9     		cbnz	r3, .L39
 548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 377              		.loc 1 548 0
 378 0062 324B     		ldr	r3, .L52
 379 0064 D3F80C42 		ldr	r4, [r3, #524]
 380 0068 0440     		ands	r4, r4, r0
 381 006a C3F80C42 		str	r4, [r3, #524]
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 382              		.loc 1 553 0
 383 006e CE68     		ldr	r6, [r1, #12]
 554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 384              		.loc 1 554 0
 385 0070 8D88     		ldrh	r5, [r1, #4]
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 386              		.loc 1 552 0
 387 0072 4C69     		ldr	r4, [r1, #20]
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 388              		.loc 1 553 0
 389 0074 45EA0645 		orr	r5, r5, r6, lsl #16
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 390              		.loc 1 552 0
 391 0078 4834     		adds	r4, r4, #72
 392 007a 43F83450 		str	r5, [r3, r4, lsl #3]
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 393              		.loc 1 559 0
 394 007e 8E68     		ldr	r6, [r1, #8]
 560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 395              		.loc 1 560 0
 396 0080 0C88     		ldrh	r4, [r1]
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 397              		.loc 1 558 0
 398 0082 4D69     		ldr	r5, [r1, #20]
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 399              		.loc 1 559 0
 400 0084 44EA0644 		orr	r4, r4, r6, lsl #16
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 401              		.loc 1 558 0
 402 0088 4835     		adds	r5, r5, #72
 403 008a 03EBC503 		add	r3, r3, r5, lsl #3
 404 008e 5C60     		str	r4, [r3, #4]
 405              	.L39:
ARM GAS  /tmp/ccpbiI8S.s 			page 20


 563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 406              		.loc 1 563 0
 407 0090 CB69     		ldr	r3, [r1, #28]
 408 0092 012B     		cmp	r3, #1
 409 0094 1DD0     		beq	.L50
 410              	.L40:
 580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 411              		.loc 1 580 0
 412 0096 8B69     		ldr	r3, [r1, #24]
 413 0098 002B     		cmp	r3, #0
 414 009a 32D1     		bne	.L41
 583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 415              		.loc 1 583 0
 416 009c 234C     		ldr	r4, .L52
 417 009e D4F80432 		ldr	r3, [r4, #516]
 418 00a2 0340     		ands	r3, r3, r0
 419 00a4 C4F80432 		str	r3, [r4, #516]
 420              	.L42:
 592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 421              		.loc 1 592 0
 422 00a8 0B69     		ldr	r3, [r1, #16]
 423 00aa 8BBB     		cbnz	r3, .L43
 595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 424              		.loc 1 595 0
 425 00ac 1F4B     		ldr	r3, .L52
 426 00ae D3F81442 		ldr	r4, [r3, #532]
 427 00b2 2040     		ands	r0, r0, r4
 428 00b4 C3F81402 		str	r0, [r3, #532]
 429              	.L44:
 604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 430              		.loc 1 604 0
 431 00b8 0B6A     		ldr	r3, [r1, #32]
 432 00ba 012B     		cmp	r3, #1
 433 00bc 2FD0     		beq	.L51
 434              	.LVL21:
 435              	.L45:
 610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 436              		.loc 1 610 0
 437 00be 1B4A     		ldr	r2, .L52
 438 00c0 D2F80032 		ldr	r3, [r2, #512]
 439 00c4 23F00103 		bic	r3, r3, #1
 440 00c8 C2F80032 		str	r3, [r2, #512]
 613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 441              		.loc 1 613 0
 442 00cc 0020     		movs	r0, #0
 443              		.loc 1 622 0
 444 00ce 70BC     		pop	{r4, r5, r6}
 445              	.LCFI3:
 446              		.cfi_remember_state
 447              		.cfi_restore 6
 448              		.cfi_restore 5
 449              		.cfi_restore 4
 450              		.cfi_def_cfa_offset 0
 451 00d0 7047     		bx	lr
 452              	.LVL22:
 453              	.L50:
 454              	.LCFI4:
ARM GAS  /tmp/ccpbiI8S.s 			page 21


 455              		.cfi_restore_state
 566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 456              		.loc 1 566 0
 457 00d2 164B     		ldr	r3, .L52
 458 00d4 D3F80C42 		ldr	r4, [r3, #524]
 459 00d8 1443     		orrs	r4, r4, r2
 460 00da C3F80C42 		str	r4, [r3, #524]
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 461              		.loc 1 570 0
 462 00de 0E68     		ldr	r6, [r1]
 571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 463              		.loc 1 571 0
 464 00e0 8D88     		ldrh	r5, [r1, #4]
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 465              		.loc 1 569 0
 466 00e2 4C69     		ldr	r4, [r1, #20]
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 467              		.loc 1 570 0
 468 00e4 45EA0645 		orr	r5, r5, r6, lsl #16
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 469              		.loc 1 569 0
 470 00e8 4834     		adds	r4, r4, #72
 471 00ea 43F83450 		str	r5, [r3, r4, lsl #3]
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 472              		.loc 1 575 0
 473 00ee 8E68     		ldr	r6, [r1, #8]
 576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 474              		.loc 1 576 0
 475 00f0 8C89     		ldrh	r4, [r1, #12]
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 476              		.loc 1 574 0
 477 00f2 4D69     		ldr	r5, [r1, #20]
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 478              		.loc 1 575 0
 479 00f4 44EA0644 		orr	r4, r4, r6, lsl #16
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 480              		.loc 1 574 0
 481 00f8 4835     		adds	r5, r5, #72
 482 00fa 03EBC503 		add	r3, r3, r5, lsl #3
 483 00fe 5C60     		str	r4, [r3, #4]
 484 0100 C9E7     		b	.L40
 485              	.L41:
 588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 486              		.loc 1 588 0
 487 0102 0A4C     		ldr	r4, .L52
 488 0104 D4F80432 		ldr	r3, [r4, #516]
 489 0108 1343     		orrs	r3, r3, r2
 490 010a C4F80432 		str	r3, [r4, #516]
 491 010e CBE7     		b	.L42
 492              	.L43:
 600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 493              		.loc 1 600 0
 494 0110 0648     		ldr	r0, .L52
 495 0112 D0F81432 		ldr	r3, [r0, #532]
 496 0116 1343     		orrs	r3, r3, r2
 497 0118 C0F81432 		str	r3, [r0, #532]
 498 011c CCE7     		b	.L44
ARM GAS  /tmp/ccpbiI8S.s 			page 22


 499              	.L51:
 606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 500              		.loc 1 606 0
 501 011e 0349     		ldr	r1, .L52
 502              	.LVL23:
 503 0120 D1F81C32 		ldr	r3, [r1, #540]
 504 0124 1A43     		orrs	r2, r2, r3
 505              	.LVL24:
 506 0126 C1F81C22 		str	r2, [r1, #540]
 507 012a C8E7     		b	.L45
 508              	.L53:
 509              		.align	2
 510              	.L52:
 511 012c 00640040 		.word	1073767424
 512              		.cfi_endproc
 513              	.LFE130:
 515              		.section	.text.HAL_CAN_Start,"ax",%progbits
 516              		.align	1
 517              		.global	HAL_CAN_Start
 518              		.syntax unified
 519              		.thumb
 520              		.thumb_func
 521              		.fpu fpv4-sp-d16
 523              	HAL_CAN_Start:
 524              	.LFB131:
 623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
 626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
 629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Control functions
 630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
 631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
 632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                       ##### Control functions #####
 634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
 637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
 638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
 639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
 640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
 641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
 642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                              and activate the corresponding
 643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                              transmission request
 644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
 645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
 646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
 647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                              pending on the selected Tx mailbox
 648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
 649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
 650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
 652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccpbiI8S.s 			page 23


 655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Start the CAN module.
 657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
 662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 525              		.loc 1 662 0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 0
 528              		@ frame_needed = 0, uses_anonymous_args = 0
 529              	.LVL25:
 530 0000 38B5     		push	{r3, r4, r5, lr}
 531              	.LCFI5:
 532              		.cfi_def_cfa_offset 16
 533              		.cfi_offset 3, -16
 534              		.cfi_offset 4, -12
 535              		.cfi_offset 5, -8
 536              		.cfi_offset 14, -4
 537              	.LVL26:
 663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
 664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 538              		.loc 1 665 0
 539 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 540 0006 DBB2     		uxtb	r3, r3
 541 0008 012B     		cmp	r3, #1
 542 000a 05D0     		beq	.L60
 666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Change CAN peripheral state */
 668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
 669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Request leave initialisation */
 671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get tick */
 674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     tickstart = HAL_GetTick();
 675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wait the acknowledge */
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check for the Timeout */
 680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
 683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Change CAN state */
 686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Reset the CAN ErrorCode */
 693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
ARM GAS  /tmp/ccpbiI8S.s 			page 24


 694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 543              		.loc 1 701 0
 544 000c 436A     		ldr	r3, [r0, #36]
 545 000e 43F40023 		orr	r3, r3, #524288
 546 0012 4362     		str	r3, [r0, #36]
 702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 547              		.loc 1 703 0
 548 0014 0120     		movs	r0, #1
 549              	.LVL27:
 550              	.L57:
 704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 551              		.loc 1 705 0
 552 0016 38BD     		pop	{r3, r4, r5, pc}
 553              	.LVL28:
 554              	.L60:
 555 0018 0446     		mov	r4, r0
 668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 556              		.loc 1 668 0
 557 001a 0223     		movs	r3, #2
 558 001c 80F82030 		strb	r3, [r0, #32]
 671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 559              		.loc 1 671 0
 560 0020 0268     		ldr	r2, [r0]
 561 0022 1368     		ldr	r3, [r2]
 562 0024 23F00103 		bic	r3, r3, #1
 563 0028 1360     		str	r3, [r2]
 674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 564              		.loc 1 674 0
 565 002a FFF7FEFF 		bl	HAL_GetTick
 566              	.LVL29:
 567 002e 0546     		mov	r5, r0
 568              	.LVL30:
 569              	.L56:
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 570              		.loc 1 677 0
 571 0030 2368     		ldr	r3, [r4]
 572 0032 5B68     		ldr	r3, [r3, #4]
 573 0034 13F0010F 		tst	r3, #1
 574 0038 0DD0     		beq	.L61
 680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 575              		.loc 1 680 0
 576 003a FFF7FEFF 		bl	HAL_GetTick
 577              	.LVL31:
 578 003e 401B     		subs	r0, r0, r5
 579 0040 0A28     		cmp	r0, #10
 580 0042 F5D9     		bls	.L56
 683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 581              		.loc 1 683 0
ARM GAS  /tmp/ccpbiI8S.s 			page 25


 582 0044 636A     		ldr	r3, [r4, #36]
 583 0046 43F40033 		orr	r3, r3, #131072
 584 004a 6362     		str	r3, [r4, #36]
 686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 585              		.loc 1 686 0
 586 004c 0523     		movs	r3, #5
 587 004e 84F82030 		strb	r3, [r4, #32]
 688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 588              		.loc 1 688 0
 589 0052 0120     		movs	r0, #1
 590 0054 DFE7     		b	.L57
 591              	.L61:
 693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 592              		.loc 1 693 0
 593 0056 0020     		movs	r0, #0
 594 0058 6062     		str	r0, [r4, #36]
 696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 595              		.loc 1 696 0
 596 005a DCE7     		b	.L57
 597              		.cfi_endproc
 598              	.LFE131:
 600              		.section	.text.HAL_CAN_Stop,"ax",%progbits
 601              		.align	1
 602              		.global	HAL_CAN_Stop
 603              		.syntax unified
 604              		.thumb
 605              		.thumb_func
 606              		.fpu fpv4-sp-d16
 608              	HAL_CAN_Stop:
 609              	.LFB132:
 706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
 709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
 714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 610              		.loc 1 714 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 614              	.LVL32:
 615 0000 38B5     		push	{r3, r4, r5, lr}
 616              	.LCFI6:
 617              		.cfi_def_cfa_offset 16
 618              		.cfi_offset 3, -16
 619              		.cfi_offset 4, -12
 620              		.cfi_offset 5, -8
 621              		.cfi_offset 14, -4
 622              	.LVL33:
 715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
 716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
 623              		.loc 1 717 0
 624 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
ARM GAS  /tmp/ccpbiI8S.s 			page 26


 625 0006 DBB2     		uxtb	r3, r3
 626 0008 022B     		cmp	r3, #2
 627 000a 05D0     		beq	.L68
 718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Request initialisation */
 720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get tick */
 723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     tickstart = HAL_GetTick();
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wait the acknowledge */
 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check for the Timeout */
 729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
 732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Change CAN state */
 735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Exit from sleep mode */
 742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Change CAN peripheral state */
 745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
 746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 628              		.loc 1 753 0
 629 000c 436A     		ldr	r3, [r0, #36]
 630 000e 43F48013 		orr	r3, r3, #1048576
 631 0012 4362     		str	r3, [r0, #36]
 754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 632              		.loc 1 755 0
 633 0014 0120     		movs	r0, #1
 634              	.LVL34:
 635              	.L65:
 756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 636              		.loc 1 757 0
 637 0016 38BD     		pop	{r3, r4, r5, pc}
 638              	.LVL35:
 639              	.L68:
 640 0018 0446     		mov	r4, r0
 720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccpbiI8S.s 			page 27


 641              		.loc 1 720 0
 642 001a 0268     		ldr	r2, [r0]
 643 001c 1368     		ldr	r3, [r2]
 644 001e 43F00103 		orr	r3, r3, #1
 645 0022 1360     		str	r3, [r2]
 723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 646              		.loc 1 723 0
 647 0024 FFF7FEFF 		bl	HAL_GetTick
 648              	.LVL36:
 649 0028 0546     		mov	r5, r0
 650              	.LVL37:
 651              	.L64:
 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 652              		.loc 1 726 0
 653 002a 2368     		ldr	r3, [r4]
 654 002c 5A68     		ldr	r2, [r3, #4]
 655 002e 12F0010F 		tst	r2, #1
 656 0032 0DD1     		bne	.L69
 729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 657              		.loc 1 729 0
 658 0034 FFF7FEFF 		bl	HAL_GetTick
 659              	.LVL38:
 660 0038 401B     		subs	r0, r0, r5
 661 003a 0A28     		cmp	r0, #10
 662 003c F5D9     		bls	.L64
 732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 663              		.loc 1 732 0
 664 003e 636A     		ldr	r3, [r4, #36]
 665 0040 43F40033 		orr	r3, r3, #131072
 666 0044 6362     		str	r3, [r4, #36]
 735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 667              		.loc 1 735 0
 668 0046 0523     		movs	r3, #5
 669 0048 84F82030 		strb	r3, [r4, #32]
 737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 670              		.loc 1 737 0
 671 004c 0120     		movs	r0, #1
 672 004e E2E7     		b	.L65
 673              	.L69:
 742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 674              		.loc 1 742 0
 675 0050 1A68     		ldr	r2, [r3]
 676 0052 22F00202 		bic	r2, r2, #2
 677 0056 1A60     		str	r2, [r3]
 745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 678              		.loc 1 745 0
 679 0058 0123     		movs	r3, #1
 680 005a 84F82030 		strb	r3, [r4, #32]
 748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 681              		.loc 1 748 0
 682 005e 0020     		movs	r0, #0
 683 0060 D9E7     		b	.L65
 684              		.cfi_endproc
 685              	.LFE132:
 687              		.section	.text.HAL_CAN_DeInit,"ax",%progbits
 688              		.align	1
 689              		.global	HAL_CAN_DeInit
ARM GAS  /tmp/ccpbiI8S.s 			page 28


 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 693              		.fpu fpv4-sp-d16
 695              	HAL_CAN_DeInit:
 696              	.LFB127:
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 697              		.loc 1 379 0
 698              		.cfi_startproc
 699              		@ args = 0, pretend = 0, frame = 0
 700              		@ frame_needed = 0, uses_anonymous_args = 0
 701              	.LVL39:
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 702              		.loc 1 381 0
 703 0000 80B1     		cbz	r0, .L72
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 704              		.loc 1 379 0
 705 0002 10B5     		push	{r4, lr}
 706              	.LCFI7:
 707              		.cfi_def_cfa_offset 8
 708              		.cfi_offset 4, -8
 709              		.cfi_offset 14, -4
 710 0004 0446     		mov	r4, r0
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 711              		.loc 1 390 0
 712 0006 FFF7FEFF 		bl	HAL_CAN_Stop
 713              	.LVL40:
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 714              		.loc 1 393 0
 715 000a 2046     		mov	r0, r4
 716 000c FFF7FEFF 		bl	HAL_CAN_MspDeInit
 717              	.LVL41:
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 718              		.loc 1 396 0
 719 0010 2268     		ldr	r2, [r4]
 720 0012 1368     		ldr	r3, [r2]
 721 0014 43F40043 		orr	r3, r3, #32768
 722 0018 1360     		str	r3, [r2]
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 723              		.loc 1 399 0
 724 001a 0020     		movs	r0, #0
 725 001c 6062     		str	r0, [r4, #36]
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 726              		.loc 1 402 0
 727 001e 84F82000 		strb	r0, [r4, #32]
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 728              		.loc 1 406 0
 729 0022 10BD     		pop	{r4, pc}
 730              	.LVL42:
 731              	.L72:
 732              	.LCFI8:
 733              		.cfi_def_cfa_offset 0
 734              		.cfi_restore 4
 735              		.cfi_restore 14
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 736              		.loc 1 383 0
 737 0024 0120     		movs	r0, #1
ARM GAS  /tmp/ccpbiI8S.s 			page 29


 738              	.LVL43:
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 739              		.loc 1 406 0
 740 0026 7047     		bx	lr
 741              		.cfi_endproc
 742              	.LFE127:
 744              		.section	.text.HAL_CAN_RequestSleep,"ax",%progbits
 745              		.align	1
 746              		.global	HAL_CAN_RequestSleep
 747              		.syntax unified
 748              		.thumb
 749              		.thumb_func
 750              		.fpu fpv4-sp-d16
 752              	HAL_CAN_RequestSleep:
 753              	.LFB133:
 758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
 761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
 762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
 763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         of a CAN frame) has been completed.
 764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status.
 767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
 769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 754              		.loc 1 769 0
 755              		.cfi_startproc
 756              		@ args = 0, pretend = 0, frame = 0
 757              		@ frame_needed = 0, uses_anonymous_args = 0
 758              		@ link register save eliminated.
 759              	.LVL44:
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 760              		.loc 1 770 0
 761 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 762 0004 DBB2     		uxtb	r3, r3
 763 0006 012B     		cmp	r3, #1
 764 0008 0AD0     		beq	.L78
 771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 765              		.loc 1 771 0 discriminator 1
 766 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 767 000e DBB2     		uxtb	r3, r3
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 768              		.loc 1 770 0 discriminator 1
 769 0010 022B     		cmp	r3, #2
 770 0012 05D0     		beq	.L78
 772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Request Sleep mode */
 774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
ARM GAS  /tmp/ccpbiI8S.s 			page 30


 782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 771              		.loc 1 782 0
 772 0014 436A     		ldr	r3, [r0, #36]
 773 0016 43F48023 		orr	r3, r3, #262144
 774 001a 4362     		str	r3, [r0, #36]
 783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 775              		.loc 1 785 0
 776 001c 0120     		movs	r0, #1
 777              	.LVL45:
 786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 778              		.loc 1 787 0
 779 001e 7047     		bx	lr
 780              	.LVL46:
 781              	.L78:
 774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 782              		.loc 1 774 0
 783 0020 0268     		ldr	r2, [r0]
 784 0022 1368     		ldr	r3, [r2]
 785 0024 43F00203 		orr	r3, r3, #2
 786 0028 1360     		str	r3, [r2]
 777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 787              		.loc 1 777 0
 788 002a 0020     		movs	r0, #0
 789              	.LVL47:
 790 002c 7047     		bx	lr
 791              		.cfi_endproc
 792              	.LFE133:
 794              		.section	.text.HAL_CAN_WakeUp,"ax",%progbits
 795              		.align	1
 796              		.global	HAL_CAN_WakeUp
 797              		.syntax unified
 798              		.thumb
 799              		.thumb_func
 800              		.fpu fpv4-sp-d16
 802              	HAL_CAN_WakeUp:
 803              	.LFB134:
 788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Wake up from sleep mode.
 791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
 792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         is exited.
 793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status.
 796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
 798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 804              		.loc 1 798 0
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 8
 807              		@ frame_needed = 0, uses_anonymous_args = 0
 808              		@ link register save eliminated.
 809              	.LVL48:
 810 0000 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccpbiI8S.s 			page 31


 811              	.LCFI9:
 812              		.cfi_def_cfa_offset 8
 799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   __IO uint32_t count = 0;
 813              		.loc 1 799 0
 814 0002 0023     		movs	r3, #0
 815 0004 0193     		str	r3, [sp, #4]
 816              	.LVL49:
 800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t timeout = 1000000U;
 801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 817              		.loc 1 802 0
 818 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 819 000a DBB2     		uxtb	r3, r3
 820 000c 012B     		cmp	r3, #1
 821 000e 0BD0     		beq	.L82
 803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 822              		.loc 1 803 0 discriminator 1
 823 0010 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 824 0014 DBB2     		uxtb	r3, r3
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 825              		.loc 1 802 0 discriminator 1
 826 0016 022B     		cmp	r3, #2
 827 0018 06D0     		beq	.L82
 804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wake up request */
 806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wait sleep mode is exited */
 809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     do
 810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check if timeout is reached */
 812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (++count > timeout)
 813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
 815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET);
 821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 828              		.loc 1 828 0
 829 001a 436A     		ldr	r3, [r0, #36]
 830 001c 43F48023 		orr	r3, r3, #262144
 831 0020 4362     		str	r3, [r0, #36]
 829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 832              		.loc 1 830 0
 833 0022 0120     		movs	r0, #1
 834              	.LVL50:
ARM GAS  /tmp/ccpbiI8S.s 			page 32


 835              	.L85:
 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 836              		.loc 1 832 0
 837 0024 02B0     		add	sp, sp, #8
 838              	.LCFI10:
 839              		.cfi_remember_state
 840              		.cfi_def_cfa_offset 0
 841              		@ sp needed
 842 0026 7047     		bx	lr
 843              	.LVL51:
 844              	.L82:
 845              	.LCFI11:
 846              		.cfi_restore_state
 806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 847              		.loc 1 806 0
 848 0028 0268     		ldr	r2, [r0]
 849 002a 1368     		ldr	r3, [r2]
 850 002c 23F00203 		bic	r3, r3, #2
 851 0030 1360     		str	r3, [r2]
 852              	.L86:
 812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 853              		.loc 1 812 0
 854 0032 019B     		ldr	r3, [sp, #4]
 855 0034 0133     		adds	r3, r3, #1
 856 0036 0193     		str	r3, [sp, #4]
 857 0038 074A     		ldr	r2, .L89
 858 003a 9342     		cmp	r3, r2
 859 003c 06D8     		bhi	.L88
 820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 860              		.loc 1 820 0
 861 003e 0368     		ldr	r3, [r0]
 862 0040 5B68     		ldr	r3, [r3, #4]
 863 0042 13F0020F 		tst	r3, #2
 864 0046 F4D1     		bne	.L86
 823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 865              		.loc 1 823 0
 866 0048 0020     		movs	r0, #0
 867              	.LVL52:
 868 004a EBE7     		b	.L85
 869              	.LVL53:
 870              	.L88:
 815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 871              		.loc 1 815 0
 872 004c 436A     		ldr	r3, [r0, #36]
 873 004e 43F40033 		orr	r3, r3, #131072
 874 0052 4362     		str	r3, [r0, #36]
 817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 875              		.loc 1 817 0
 876 0054 0120     		movs	r0, #1
 877              	.LVL54:
 878 0056 E5E7     		b	.L85
 879              	.L90:
 880              		.align	2
 881              	.L89:
 882 0058 40420F00 		.word	1000000
 883              		.cfi_endproc
ARM GAS  /tmp/ccpbiI8S.s 			page 33


 884              	.LFE134:
 886              		.section	.text.HAL_CAN_IsSleepActive,"ax",%progbits
 887              		.align	1
 888              		.global	HAL_CAN_IsSleepActive
 889              		.syntax unified
 890              		.thumb
 891              		.thumb_func
 892              		.fpu fpv4-sp-d16
 894              	HAL_CAN_IsSleepActive:
 895              	.LFB135:
 833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Check is sleep mode is active.
 836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Status
 839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
 840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 1 : Sleep mode is active.
 841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
 843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 896              		.loc 1 843 0
 897              		.cfi_startproc
 898              		@ args = 0, pretend = 0, frame = 0
 899              		@ frame_needed = 0, uses_anonymous_args = 0
 900              		@ link register save eliminated.
 901              	.LVL55:
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t status = 0U;
 845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 902              		.loc 1 846 0
 903 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 904 0004 DBB2     		uxtb	r3, r3
 905 0006 012B     		cmp	r3, #1
 906 0008 06D0     		beq	.L92
 847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 907              		.loc 1 847 0 discriminator 1
 908 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 909 000e DBB2     		uxtb	r3, r3
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 910              		.loc 1 846 0 discriminator 1
 911 0010 022B     		cmp	r3, #2
 912 0012 01D0     		beq	.L92
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t status = 0U;
 913              		.loc 1 844 0
 914 0014 0020     		movs	r0, #0
 915              	.LVL56:
 916 0016 7047     		bx	lr
 917              	.LVL57:
 918              	.L92:
 848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Sleep mode */
 850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 919              		.loc 1 850 0
 920 0018 0368     		ldr	r3, [r0]
 921 001a 5B68     		ldr	r3, [r3, #4]
 922 001c 13F0020F 		tst	r3, #2
ARM GAS  /tmp/ccpbiI8S.s 			page 34


 923 0020 01D0     		beq	.L96
 851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       status = 1U;
 924              		.loc 1 852 0
 925 0022 0120     		movs	r0, #1
 926              	.LVL58:
 853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return function status */
 857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
 858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 927              		.loc 1 858 0
 928 0024 7047     		bx	lr
 929              	.LVL59:
 930              	.L96:
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 931              		.loc 1 844 0
 932 0026 0020     		movs	r0, #0
 933              	.LVL60:
 934 0028 7047     		bx	lr
 935              		.cfi_endproc
 936              	.LFE135:
 938              		.section	.text.HAL_CAN_AddTxMessage,"ax",%progbits
 939              		.align	1
 940              		.global	HAL_CAN_AddTxMessage
 941              		.syntax unified
 942              		.thumb
 943              		.thumb_func
 944              		.fpu fpv4-sp-d16
 946              	HAL_CAN_AddTxMessage:
 947              	.LFB136:
 859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
 862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         corresponding transmission request.
 863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
 866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
 867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
 868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
 869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
 870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8
 873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 948              		.loc 1 873 0
 949              		.cfi_startproc
 950              		@ args = 0, pretend = 0, frame = 0
 951              		@ frame_needed = 0, uses_anonymous_args = 0
 952              		@ link register save eliminated.
 953              	.LVL61:
 954 0000 70B4     		push	{r4, r5, r6}
 955              	.LCFI12:
 956              		.cfi_def_cfa_offset 12
 957              		.cfi_offset 4, -12
ARM GAS  /tmp/ccpbiI8S.s 			page 35


 958              		.cfi_offset 5, -8
 959              		.cfi_offset 6, -4
 874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t transmitmailbox;
 875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check the parameters */
 877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
 879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
 880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
 881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
 883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
 887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 960              		.loc 1 890 0
 961 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 962 0006 E4B2     		uxtb	r4, r4
 963 0008 012C     		cmp	r4, #1
 964 000a 0AD0     		beq	.L98
 891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 965              		.loc 1 891 0 discriminator 1
 966 000c 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 967 0010 E4B2     		uxtb	r4, r4
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 968              		.loc 1 890 0 discriminator 1
 969 0012 022C     		cmp	r4, #2
 970 0014 05D0     		beq	.L98
 892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Select an empty transmit mailbox */
 899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Store the Tx mailbox */
 902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *pTxMailbox = 1U << transmitmailbox;
 903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the Id */
 905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
 906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
 911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccpbiI8S.s 			page 36


 917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the DLC */
 918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
 921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
 922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the data field */
 927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
 929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
 930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
 931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
 932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
 934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
 935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
 936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
 937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Request transmission */
 939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Return function status */
 942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_OK;
 943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
 945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Update error code */
 947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_ERROR;
 950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 971              		.loc 1 955 0
 972 0016 436A     		ldr	r3, [r0, #36]
 973              	.LVL62:
 974 0018 43F48023 		orr	r3, r3, #262144
 975 001c 4362     		str	r3, [r0, #36]
 956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 976              		.loc 1 957 0
 977 001e 0120     		movs	r0, #1
 978              	.LVL63:
 979 0020 4DE0     		b	.L105
 980              	.LVL64:
 981              	.L98:
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 982              		.loc 1 894 0
 983 0022 0468     		ldr	r4, [r0]
 984 0024 A568     		ldr	r5, [r4, #8]
 985 0026 15F0806F 		tst	r5, #67108864
ARM GAS  /tmp/ccpbiI8S.s 			page 37


 986 002a 07D1     		bne	.L100
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 987              		.loc 1 895 0 discriminator 1
 988 002c A568     		ldr	r5, [r4, #8]
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 989              		.loc 1 894 0 discriminator 1
 990 002e 15F0006F 		tst	r5, #134217728
 991 0032 03D1     		bne	.L100
 896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 992              		.loc 1 896 0
 993 0034 A568     		ldr	r5, [r4, #8]
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 994              		.loc 1 895 0
 995 0036 15F0805F 		tst	r5, #268435456
 996 003a 55D0     		beq	.L101
 997              	.L100:
 899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 998              		.loc 1 899 0
 999 003c A468     		ldr	r4, [r4, #8]
 1000 003e C4F30164 		ubfx	r4, r4, #24, #2
 1001              	.LVL65:
 902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1002              		.loc 1 902 0
 1003 0042 0125     		movs	r5, #1
 1004 0044 A540     		lsls	r5, r5, r4
 1005 0046 1D60     		str	r5, [r3]
 905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 1006              		.loc 1 905 0
 1007 0048 8B68     		ldr	r3, [r1, #8]
 1008              	.LVL66:
 1009 004a 002B     		cmp	r3, #0
 1010 004c 39D1     		bne	.L102
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 1011              		.loc 1 907 0
 1012 004e 0E68     		ldr	r6, [r1]
 908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 1013              		.loc 1 908 0
 1014 0050 CB68     		ldr	r3, [r1, #12]
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 1015              		.loc 1 907 0
 1016 0052 0568     		ldr	r5, [r0]
 1017 0054 43EA4656 		orr	r6, r3, r6, lsl #21
 1018 0058 04F11803 		add	r3, r4, #24
 1019 005c 1B01     		lsls	r3, r3, #4
 1020 005e EE50     		str	r6, [r5, r3]
 1021              	.L103:
 918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1022              		.loc 1 918 0
 1023 0060 0368     		ldr	r3, [r0]
 1024 0062 0D69     		ldr	r5, [r1, #16]
 1025 0064 04F11806 		add	r6, r4, #24
 1026 0068 03EB0613 		add	r3, r3, r6, lsl #4
 1027 006c 5D60     		str	r5, [r3, #4]
 921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 1028              		.loc 1 921 0
 1029 006e 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 1030 0070 012B     		cmp	r3, #1
ARM GAS  /tmp/ccpbiI8S.s 			page 38


 1031 0072 31D0     		beq	.L107
 1032              	.LVL67:
 1033              	.L104:
 927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
 1034              		.loc 1 927 0
 1035 0074 D179     		ldrb	r1, [r2, #7]	@ zero_extendqisi2
 1036 0076 9379     		ldrb	r3, [r2, #6]	@ zero_extendqisi2
 1037 0078 1B04     		lsls	r3, r3, #16
 1038 007a 43EA0163 		orr	r3, r3, r1, lsl #24
 1039 007e 5179     		ldrb	r1, [r2, #5]	@ zero_extendqisi2
 1040 0080 43EA0123 		orr	r3, r3, r1, lsl #8
 1041 0084 1579     		ldrb	r5, [r2, #4]	@ zero_extendqisi2
 1042 0086 0168     		ldr	r1, [r0]
 1043 0088 2B43     		orrs	r3, r3, r5
 1044 008a 2501     		lsls	r5, r4, #4
 1045 008c 2944     		add	r1, r1, r5
 1046 008e C1F88C31 		str	r3, [r1, #396]
 932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
 1047              		.loc 1 932 0
 1048 0092 D178     		ldrb	r1, [r2, #3]	@ zero_extendqisi2
 1049 0094 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1050 0096 1B04     		lsls	r3, r3, #16
 1051 0098 43EA0163 		orr	r3, r3, r1, lsl #24
 1052 009c 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 1053 009e 43EA0123 		orr	r3, r3, r1, lsl #8
 1054 00a2 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1055 00a4 0268     		ldr	r2, [r0]
 1056              	.LVL68:
 1057 00a6 0B43     		orrs	r3, r3, r1
 1058 00a8 2A44     		add	r2, r2, r5
 1059 00aa C2F88831 		str	r3, [r2, #392]
 939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1060              		.loc 1 939 0
 1061 00ae 0268     		ldr	r2, [r0]
 1062 00b0 1834     		adds	r4, r4, #24
 1063              	.LVL69:
 1064 00b2 2401     		lsls	r4, r4, #4
 1065 00b4 1359     		ldr	r3, [r2, r4]
 1066 00b6 43F00103 		orr	r3, r3, #1
 1067 00ba 1351     		str	r3, [r2, r4]
 942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1068              		.loc 1 942 0
 1069 00bc 0020     		movs	r0, #0
 1070              	.LVL70:
 1071              	.L105:
 958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1072              		.loc 1 959 0
 1073 00be 70BC     		pop	{r4, r5, r6}
 1074              	.LCFI13:
 1075              		.cfi_remember_state
 1076              		.cfi_restore 6
 1077              		.cfi_restore 5
 1078              		.cfi_restore 4
 1079              		.cfi_def_cfa_offset 0
 1080 00c0 7047     		bx	lr
 1081              	.LVL71:
ARM GAS  /tmp/ccpbiI8S.s 			page 39


 1082              	.L102:
 1083              	.LCFI14:
 1084              		.cfi_restore_state
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 1085              		.loc 1 912 0
 1086 00c2 4D68     		ldr	r5, [r1, #4]
 1087 00c4 43EAC503 		orr	r3, r3, r5, lsl #3
 914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 1088              		.loc 1 914 0
 1089 00c8 CD68     		ldr	r5, [r1, #12]
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 1090              		.loc 1 912 0
 1091 00ca 0668     		ldr	r6, [r0]
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 1092              		.loc 1 913 0
 1093 00cc 2B43     		orrs	r3, r3, r5
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 1094              		.loc 1 912 0
 1095 00ce 04F11805 		add	r5, r4, #24
 1096 00d2 2D01     		lsls	r5, r5, #4
 1097 00d4 7351     		str	r3, [r6, r5]
 1098 00d6 C3E7     		b	.L103
 1099              	.L107:
 923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 1100              		.loc 1 923 0
 1101 00d8 0368     		ldr	r3, [r0]
 1102 00da 03EB0613 		add	r3, r3, r6, lsl #4
 1103 00de 5968     		ldr	r1, [r3, #4]
 1104              	.LVL72:
 1105 00e0 41F48071 		orr	r1, r1, #256
 1106 00e4 5960     		str	r1, [r3, #4]
 1107 00e6 C5E7     		b	.L104
 1108              	.LVL73:
 1109              	.L101:
 947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1110              		.loc 1 947 0
 1111 00e8 436A     		ldr	r3, [r0, #36]
 1112              	.LVL74:
 1113 00ea 43F40013 		orr	r3, r3, #2097152
 1114 00ee 4362     		str	r3, [r0, #36]
 949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1115              		.loc 1 949 0
 1116 00f0 0120     		movs	r0, #1
 1117              	.LVL75:
 1118 00f2 E4E7     		b	.L105
 1119              		.cfi_endproc
 1120              	.LFE136:
 1122              		.section	.text.HAL_CAN_AbortTxRequest,"ax",%progbits
 1123              		.align	1
 1124              		.global	HAL_CAN_AbortTxRequest
 1125              		.syntax unified
 1126              		.thumb
 1127              		.thumb_func
 1128              		.fpu fpv4-sp-d16
 1130              	HAL_CAN_AbortTxRequest:
 1131              	.LFB137:
 960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccpbiI8S.s 			page 40


 961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Abort transmission requests
 963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
 966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
 967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
 970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1132              		.loc 1 970 0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 0
 1135              		@ frame_needed = 0, uses_anonymous_args = 0
 1136              		@ link register save eliminated.
 1137              	.LVL76:
 971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
 972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1138              		.loc 1 974 0
 1139 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1140 0004 DBB2     		uxtb	r3, r3
 1141 0006 012B     		cmp	r3, #1
 1142 0008 0AD0     		beq	.L109
 975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1143              		.loc 1 975 0 discriminator 1
 1144 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1145 000e DBB2     		uxtb	r3, r3
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1146              		.loc 1 974 0 discriminator 1
 1147 0010 022B     		cmp	r3, #2
 1148 0012 05D0     		beq	.L109
 976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 0 */
 978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != RESET)
 979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
 981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 1 */
 985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != RESET)
 986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
 988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 2 */
 992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != RESET)
 993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
 995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
ARM GAS  /tmp/ccpbiI8S.s 			page 41


1000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1149              		.loc 1 1004 0
 1150 0014 436A     		ldr	r3, [r0, #36]
 1151 0016 43F48023 		orr	r3, r3, #262144
 1152 001a 4362     		str	r3, [r0, #36]
1005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1153              		.loc 1 1006 0
 1154 001c 0120     		movs	r0, #1
 1155              	.LVL77:
 1156 001e 7047     		bx	lr
 1157              	.LVL78:
 1158              	.L109:
 978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1159              		.loc 1 978 0
 1160 0020 11F0010F 		tst	r1, #1
 1161 0024 04D0     		beq	.L111
 981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1162              		.loc 1 981 0
 1163 0026 0268     		ldr	r2, [r0]
 1164 0028 9368     		ldr	r3, [r2, #8]
 1165 002a 43F08003 		orr	r3, r3, #128
 1166 002e 9360     		str	r3, [r2, #8]
 1167              	.L111:
 985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1168              		.loc 1 985 0
 1169 0030 11F0020F 		tst	r1, #2
 1170 0034 04D0     		beq	.L112
 988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1171              		.loc 1 988 0
 1172 0036 0268     		ldr	r2, [r0]
 1173 0038 9368     		ldr	r3, [r2, #8]
 1174 003a 43F40043 		orr	r3, r3, #32768
 1175 003e 9360     		str	r3, [r2, #8]
 1176              	.L112:
 992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1177              		.loc 1 992 0
 1178 0040 11F0040F 		tst	r1, #4
 1179 0044 06D0     		beq	.L114
 995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1180              		.loc 1 995 0
 1181 0046 0268     		ldr	r2, [r0]
 1182 0048 9368     		ldr	r3, [r2, #8]
 1183 004a 43F40003 		orr	r3, r3, #8388608
 1184 004e 9360     		str	r3, [r2, #8]
 999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1185              		.loc 1 999 0
 1186 0050 0020     		movs	r0, #0
 1187              	.LVL79:
 1188 0052 7047     		bx	lr
 1189              	.LVL80:
 1190              	.L114:
 1191 0054 0020     		movs	r0, #0
ARM GAS  /tmp/ccpbiI8S.s 			page 42


 1192              	.LVL81:
1007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1193              		.loc 1 1008 0
 1194 0056 7047     		bx	lr
 1195              		.cfi_endproc
 1196              	.LFE137:
 1198              		.section	.text.HAL_CAN_GetTxMailboxesFreeLevel,"ax",%progbits
 1199              		.align	1
 1200              		.global	HAL_CAN_GetTxMailboxesFreeLevel
 1201              		.syntax unified
 1202              		.thumb
 1203              		.thumb_func
 1204              		.fpu fpv4-sp-d16
 1206              	HAL_CAN_GetTxMailboxesFreeLevel:
 1207              	.LFB138:
1009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
1012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
1015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
1017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1208              		.loc 1 1017 0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 0
 1211              		@ frame_needed = 0, uses_anonymous_args = 0
 1212              		@ link register save eliminated.
 1213              	.LVL82:
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t freelevel = 0U;
1019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1214              		.loc 1 1020 0
 1215 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1216 0004 DBB2     		uxtb	r3, r3
 1217 0006 012B     		cmp	r3, #1
 1218 0008 06D0     		beq	.L116
1021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1219              		.loc 1 1021 0 discriminator 1
 1220 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1221 000e DBB2     		uxtb	r3, r3
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1222              		.loc 1 1020 0 discriminator 1
 1223 0010 022B     		cmp	r3, #2
 1224 0012 01D0     		beq	.L116
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t freelevel = 0U;
 1225              		.loc 1 1018 0
 1226 0014 0020     		movs	r0, #0
 1227              	.LVL83:
 1228              	.L115:
1022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
1024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != RESET)
1025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       freelevel++;
ARM GAS  /tmp/ccpbiI8S.s 			page 43


1027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
1030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET)
1031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       freelevel++;
1033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET)
1037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       freelevel++;
1039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return freelevel;
1044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1229              		.loc 1 1044 0
 1230 0016 7047     		bx	lr
 1231              	.LVL84:
 1232              	.L116:
1024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1233              		.loc 1 1024 0
 1234 0018 0368     		ldr	r3, [r0]
 1235 001a 9A68     		ldr	r2, [r3, #8]
 1236 001c 12F0806F 		tst	r2, #67108864
 1237 0020 0BD1     		bne	.L121
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1238              		.loc 1 1018 0
 1239 0022 0020     		movs	r0, #0
 1240              	.LVL85:
 1241              	.L118:
1030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1242              		.loc 1 1030 0
 1243 0024 9A68     		ldr	r2, [r3, #8]
 1244 0026 12F0006F 		tst	r2, #134217728
 1245 002a 00D0     		beq	.L119
1032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1246              		.loc 1 1032 0
 1247 002c 0130     		adds	r0, r0, #1
 1248              	.LVL86:
 1249              	.L119:
1036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1250              		.loc 1 1036 0
 1251 002e 9B68     		ldr	r3, [r3, #8]
 1252 0030 13F0805F 		tst	r3, #268435456
 1253 0034 EFD0     		beq	.L115
1038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1254              		.loc 1 1038 0
 1255 0036 0130     		adds	r0, r0, #1
 1256              	.LVL87:
 1257 0038 7047     		bx	lr
 1258              	.LVL88:
 1259              	.L121:
1026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1260              		.loc 1 1026 0
ARM GAS  /tmp/ccpbiI8S.s 			page 44


 1261 003a 0120     		movs	r0, #1
 1262              	.LVL89:
 1263 003c F2E7     		b	.L118
 1264              		.cfi_endproc
 1265              	.LFE138:
 1267              		.section	.text.HAL_CAN_IsTxMessagePending,"ax",%progbits
 1268              		.align	1
 1269              		.global	HAL_CAN_IsTxMessagePending
 1270              		.syntax unified
 1271              		.thumb
 1272              		.thumb_func
 1273              		.fpu fpv4-sp-d16
 1275              	HAL_CAN_IsTxMessagePending:
 1276              	.LFB139:
1045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         Mailboxes.
1049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Status
1054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *                Tx Mailbox.
1057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1277              		.loc 1 1059 0
 1278              		.cfi_startproc
 1279              		@ args = 0, pretend = 0, frame = 0
 1280              		@ frame_needed = 0, uses_anonymous_args = 0
 1281              		@ link register save eliminated.
 1282              	.LVL90:
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t status = 0U;
1061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1283              		.loc 1 1065 0
 1284 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1285 0004 DBB2     		uxtb	r3, r3
 1286 0006 012B     		cmp	r3, #1
 1287 0008 06D0     		beq	.L123
1066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1288              		.loc 1 1066 0 discriminator 1
 1289 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1290 000e DBB2     		uxtb	r3, r3
1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1291              		.loc 1 1065 0 discriminator 1
 1292 0010 022B     		cmp	r3, #2
 1293 0012 01D0     		beq	.L123
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t status = 0U;
 1294              		.loc 1 1060 0
 1295 0014 0020     		movs	r0, #0
ARM GAS  /tmp/ccpbiI8S.s 			page 45


 1296              	.LVL91:
 1297 0016 7047     		bx	lr
 1298              	.LVL92:
 1299              	.L123:
1067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
 1300              		.loc 1 1069 0
 1301 0018 0368     		ldr	r3, [r0]
 1302 001a 9B68     		ldr	r3, [r3, #8]
 1303 001c 8906     		lsls	r1, r1, #26
 1304              	.LVL93:
 1305 001e 31EA0303 		bics	r3, r1, r3
 1306 0022 01D0     		beq	.L127
1070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       status = 1U;
 1307              		.loc 1 1071 0
 1308 0024 0120     		movs	r0, #1
 1309              	.LVL94:
1072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return status */
1076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
1077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1310              		.loc 1 1077 0
 1311 0026 7047     		bx	lr
 1312              	.LVL95:
 1313              	.L127:
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1314              		.loc 1 1060 0
 1315 0028 0020     		movs	r0, #0
 1316              	.LVL96:
 1317 002a 7047     		bx	lr
 1318              		.cfi_endproc
 1319              	.LFE139:
 1321              		.section	.text.HAL_CAN_GetTxTimestamp,"ax",%progbits
 1322              		.align	1
 1323              		.global	HAL_CAN_GetTxTimestamp
 1324              		.syntax unified
 1325              		.thumb
 1326              		.thumb_func
 1327              		.fpu fpv4-sp-d16
 1329              	HAL_CAN_GetTxTimestamp:
 1330              	.LFB140:
1078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             mode is enabled.
1082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         read.
1086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
ARM GAS  /tmp/ccpbiI8S.s 			page 46


1090:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1331              		.loc 1 1090 0
 1332              		.cfi_startproc
 1333              		@ args = 0, pretend = 0, frame = 0
 1334              		@ frame_needed = 0, uses_anonymous_args = 0
 1335              		@ link register save eliminated.
 1336              	.LVL97:
1091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t timestamp = 0U;
1092:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t transmitmailbox;
1093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1095:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
1096:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1337              		.loc 1 1097 0
 1338 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1339 0004 DBB2     		uxtb	r3, r3
 1340 0006 012B     		cmp	r3, #1
 1341 0008 06D0     		beq	.L129
1098:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1342              		.loc 1 1098 0 discriminator 1
 1343 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1344 000e DBB2     		uxtb	r3, r3
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1345              		.loc 1 1097 0 discriminator 1
 1346 0010 022B     		cmp	r3, #2
 1347 0012 01D0     		beq	.L129
1091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t timestamp = 0U;
 1348              		.loc 1 1091 0
 1349 0014 0020     		movs	r0, #0
 1350              	.LVL98:
1099:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Select the Tx mailbox */
1101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     transmitmailbox = POSITION_VAL(TxMailbox);
1102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get timestamp */
1104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
1105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return the timestamp */
1108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return timestamp;
1109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1351              		.loc 1 1109 0
 1352 0016 7047     		bx	lr
 1353              	.LVL99:
 1354              	.L129:
 1355              	.LBB4:
 1356              	.LBB5:
 1357              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccpbiI8S.s 			page 47


   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
ARM GAS  /tmp/ccpbiI8S.s 			page 48


  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccpbiI8S.s 			page 49


 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccpbiI8S.s 			page 50


 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccpbiI8S.s 			page 51


 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccpbiI8S.s 			page 52


 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccpbiI8S.s 			page 53


 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccpbiI8S.s 			page 54


 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
ARM GAS  /tmp/ccpbiI8S.s 			page 55


 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
ARM GAS  /tmp/ccpbiI8S.s 			page 56


 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1358              		.loc 2 531 0
 1359              		.syntax unified
 1360              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1361 0018 91FAA1F1 		rbit r1, r1
 1362              	@ 0 "" 2
 1363              	.LVL100:
 1364              		.thumb
 1365              		.syntax unified
 1366              	.LBE5:
 1367              	.LBE4:
1101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1368              		.loc 1 1101 0
 1369 001c B1FA81F1 		clz	r1, r1
 1370              	.LVL101:
1104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1371              		.loc 1 1104 0
 1372 0020 0368     		ldr	r3, [r0]
 1373 0022 1831     		adds	r1, r1, #24
 1374              	.LVL102:
 1375 0024 03EB0111 		add	r1, r3, r1, lsl #4
 1376              	.LVL103:
 1377 0028 4868     		ldr	r0, [r1, #4]
 1378              	.LVL104:
 1379 002a 000C     		lsrs	r0, r0, #16
 1380              	.LVL105:
 1381 002c 7047     		bx	lr
 1382              		.cfi_endproc
 1383              	.LFE140:
 1385              		.section	.text.HAL_CAN_GetRxMessage,"ax",%progbits
 1386              		.align	1
 1387              		.global	HAL_CAN_GetRxMessage
 1388              		.syntax unified
 1389              		.thumb
 1390              		.thumb_func
 1391              		.fpu fpv4-sp-d16
 1393              	HAL_CAN_GetRxMessage:
 1394              	.LFB141:
1110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
1118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         of the Rx frame will be stored.
1119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
ARM GAS  /tmp/ccpbiI8S.s 			page 57


1120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDe
1123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1395              		.loc 1 1123 0
 1396              		.cfi_startproc
 1397              		@ args = 0, pretend = 0, frame = 0
 1398              		@ frame_needed = 0, uses_anonymous_args = 0
 1399              		@ link register save eliminated.
 1400              	.LVL106:
 1401 0000 30B4     		push	{r4, r5}
 1402              	.LCFI15:
 1403              		.cfi_def_cfa_offset 8
 1404              		.cfi_offset 4, -8
 1405              		.cfi_offset 5, -4
1124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1406              		.loc 1 1126 0
 1407 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 1408 0006 E4B2     		uxtb	r4, r4
 1409 0008 012C     		cmp	r4, #1
 1410 000a 0BD0     		beq	.L133
1127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1411              		.loc 1 1127 0 discriminator 1
 1412 000c 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 1413 0010 E4B2     		uxtb	r4, r4
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1414              		.loc 1 1126 0 discriminator 1
 1415 0012 022C     		cmp	r4, #2
 1416 0014 06D0     		beq	.L133
1128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the Rx FIFO */
1130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
1131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
1134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
1136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
1137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
1139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
1142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
1145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
1147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
1148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
1150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get the header */
ARM GAS  /tmp/ccpbiI8S.s 			page 58


1154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
1155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
1156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
1158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
1160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR)
1162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
1164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
1165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
1166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
1167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get the data */
1169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos
1170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos
1171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos
1172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos
1173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos
1174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos
1175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos
1176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos
1177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Release the FIFO */
1179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
1180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Release RX FIFO 0 */
1182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
1183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
1185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Release RX FIFO 1 */
1187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
1188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
1192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1417              		.loc 1 1196 0
 1418 0016 436A     		ldr	r3, [r0, #36]
 1419              	.LVL107:
 1420 0018 43F48023 		orr	r3, r3, #262144
 1421 001c 4362     		str	r3, [r0, #36]
1197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1422              		.loc 1 1198 0
 1423 001e 0120     		movs	r0, #1
 1424              	.LVL108:
 1425              	.L137:
1199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1426              		.loc 1 1200 0
ARM GAS  /tmp/ccpbiI8S.s 			page 59


 1427 0020 30BC     		pop	{r4, r5}
 1428              	.LCFI16:
 1429              		.cfi_remember_state
 1430              		.cfi_restore 5
 1431              		.cfi_restore 4
 1432              		.cfi_def_cfa_offset 0
 1433 0022 7047     		bx	lr
 1434              	.LVL109:
 1435              	.L133:
 1436              	.LCFI17:
 1437              		.cfi_restore_state
1130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1438              		.loc 1 1130 0
 1439 0024 51B9     		cbnz	r1, .L135
1133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 1440              		.loc 1 1133 0
 1441 0026 0468     		ldr	r4, [r0]
 1442 0028 E468     		ldr	r4, [r4, #12]
 1443 002a 14F0030F 		tst	r4, #3
 1444 002e 07D1     		bne	.L136
1136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1445              		.loc 1 1136 0
 1446 0030 436A     		ldr	r3, [r0, #36]
 1447              	.LVL110:
 1448 0032 43F40013 		orr	r3, r3, #2097152
 1449 0036 4362     		str	r3, [r0, #36]
1138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 1450              		.loc 1 1138 0
 1451 0038 0120     		movs	r0, #1
 1452              	.LVL111:
 1453 003a F1E7     		b	.L137
 1454              	.LVL112:
 1455              	.L135:
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1456              		.loc 1 1141 0
 1457 003c 0129     		cmp	r1, #1
 1458 003e 5DD0     		beq	.L143
 1459              	.L136:
1154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 1460              		.loc 1 1154 0
 1461 0040 0568     		ldr	r5, [r0]
 1462 0042 01F11B04 		add	r4, r1, #27
 1463 0046 2401     		lsls	r4, r4, #4
 1464 0048 2C59     		ldr	r4, [r5, r4]
 1465 004a 04F00404 		and	r4, r4, #4
 1466 004e 9460     		str	r4, [r2, #8]
1155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1467              		.loc 1 1155 0
 1468 0050 002C     		cmp	r4, #0
 1469 0052 5ED1     		bne	.L138
1157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1470              		.loc 1 1157 0
 1471 0054 0568     		ldr	r5, [r0]
 1472 0056 01F11B04 		add	r4, r1, #27
 1473 005a 2401     		lsls	r4, r4, #4
 1474 005c 2C59     		ldr	r4, [r5, r4]
 1475 005e 640D     		lsrs	r4, r4, #21
ARM GAS  /tmp/ccpbiI8S.s 			page 60


 1476 0060 1460     		str	r4, [r2]
 1477              	.L139:
1163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 1478              		.loc 1 1163 0
 1479 0062 0568     		ldr	r5, [r0]
 1480 0064 01F11B04 		add	r4, r1, #27
 1481 0068 2401     		lsls	r4, r4, #4
 1482 006a 2D59     		ldr	r5, [r5, r4]
 1483 006c C5F34005 		ubfx	r5, r5, #1, #1
 1484 0070 D560     		str	r5, [r2, #12]
1164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1485              		.loc 1 1164 0
 1486 0072 0568     		ldr	r5, [r0]
 1487 0074 2544     		add	r5, r5, r4
 1488 0076 6D68     		ldr	r5, [r5, #4]
 1489 0078 05F00F05 		and	r5, r5, #15
 1490 007c 1561     		str	r5, [r2, #16]
1165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1491              		.loc 1 1165 0
 1492 007e 0568     		ldr	r5, [r0]
 1493 0080 2544     		add	r5, r5, r4
 1494 0082 6D68     		ldr	r5, [r5, #4]
 1495 0084 C5F30725 		ubfx	r5, r5, #8, #8
 1496 0088 9561     		str	r5, [r2, #24]
1166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1497              		.loc 1 1166 0
 1498 008a 0568     		ldr	r5, [r0]
 1499 008c 2C44     		add	r4, r4, r5
 1500 008e 6468     		ldr	r4, [r4, #4]
 1501 0090 240C     		lsrs	r4, r4, #16
 1502 0092 5461     		str	r4, [r2, #20]
1169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos
 1503              		.loc 1 1169 0
 1504 0094 0468     		ldr	r4, [r0]
 1505 0096 0A01     		lsls	r2, r1, #4
 1506              	.LVL113:
 1507 0098 1444     		add	r4, r4, r2
 1508 009a D4F8B841 		ldr	r4, [r4, #440]
 1509 009e 1C70     		strb	r4, [r3]
1170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos
 1510              		.loc 1 1170 0
 1511 00a0 0468     		ldr	r4, [r0]
 1512 00a2 1444     		add	r4, r4, r2
 1513 00a4 D4F8B841 		ldr	r4, [r4, #440]
 1514 00a8 240A     		lsrs	r4, r4, #8
 1515 00aa 5C70     		strb	r4, [r3, #1]
1171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos
 1516              		.loc 1 1171 0
 1517 00ac 0468     		ldr	r4, [r0]
 1518 00ae 1444     		add	r4, r4, r2
 1519 00b0 D4F8B841 		ldr	r4, [r4, #440]
 1520 00b4 240C     		lsrs	r4, r4, #16
 1521 00b6 9C70     		strb	r4, [r3, #2]
1172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos
 1522              		.loc 1 1172 0
 1523 00b8 0468     		ldr	r4, [r0]
 1524 00ba 1444     		add	r4, r4, r2
ARM GAS  /tmp/ccpbiI8S.s 			page 61


 1525 00bc D4F8B841 		ldr	r4, [r4, #440]
 1526 00c0 240E     		lsrs	r4, r4, #24
 1527 00c2 DC70     		strb	r4, [r3, #3]
1173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos
 1528              		.loc 1 1173 0
 1529 00c4 0468     		ldr	r4, [r0]
 1530 00c6 1444     		add	r4, r4, r2
 1531 00c8 D4F8BC41 		ldr	r4, [r4, #444]
 1532 00cc 1C71     		strb	r4, [r3, #4]
1174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos
 1533              		.loc 1 1174 0
 1534 00ce 0468     		ldr	r4, [r0]
 1535 00d0 1444     		add	r4, r4, r2
 1536 00d2 D4F8BC41 		ldr	r4, [r4, #444]
 1537 00d6 240A     		lsrs	r4, r4, #8
 1538 00d8 5C71     		strb	r4, [r3, #5]
1175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos
 1539              		.loc 1 1175 0
 1540 00da 0468     		ldr	r4, [r0]
 1541 00dc 1444     		add	r4, r4, r2
 1542 00de D4F8BC41 		ldr	r4, [r4, #444]
 1543 00e2 240C     		lsrs	r4, r4, #16
 1544 00e4 9C71     		strb	r4, [r3, #6]
1176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1545              		.loc 1 1176 0
 1546 00e6 0468     		ldr	r4, [r0]
 1547 00e8 2244     		add	r2, r2, r4
 1548 00ea D2F8BC21 		ldr	r2, [r2, #444]
 1549 00ee 120E     		lsrs	r2, r2, #24
 1550 00f0 DA71     		strb	r2, [r3, #7]
1179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1551              		.loc 1 1179 0
 1552 00f2 B1B1     		cbz	r1, .L144
1184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1553              		.loc 1 1184 0
 1554 00f4 0129     		cmp	r1, #1
 1555 00f6 1BD0     		beq	.L145
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1556              		.loc 1 1191 0
 1557 00f8 0020     		movs	r0, #0
 1558              	.LVL114:
 1559 00fa 91E7     		b	.L137
 1560              	.LVL115:
 1561              	.L143:
1144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 1562              		.loc 1 1144 0
 1563 00fc 0468     		ldr	r4, [r0]
 1564 00fe 2469     		ldr	r4, [r4, #16]
 1565 0100 14F0030F 		tst	r4, #3
 1566 0104 9CD1     		bne	.L136
1147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1567              		.loc 1 1147 0
 1568 0106 436A     		ldr	r3, [r0, #36]
 1569              	.LVL116:
 1570 0108 43F40013 		orr	r3, r3, #2097152
 1571 010c 4362     		str	r3, [r0, #36]
1149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
ARM GAS  /tmp/ccpbiI8S.s 			page 62


 1572              		.loc 1 1149 0
 1573 010e 0120     		movs	r0, #1
 1574              	.LVL117:
 1575 0110 86E7     		b	.L137
 1576              	.LVL118:
 1577              	.L138:
1161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1578              		.loc 1 1161 0
 1579 0112 0568     		ldr	r5, [r0]
 1580 0114 01F11B04 		add	r4, r1, #27
 1581 0118 2401     		lsls	r4, r4, #4
 1582 011a 2C59     		ldr	r4, [r5, r4]
 1583 011c E408     		lsrs	r4, r4, #3
 1584 011e 5460     		str	r4, [r2, #4]
 1585 0120 9FE7     		b	.L139
 1586              	.LVL119:
 1587              	.L144:
1182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1588              		.loc 1 1182 0
 1589 0122 0268     		ldr	r2, [r0]
 1590 0124 D368     		ldr	r3, [r2, #12]
 1591              	.LVL120:
 1592 0126 43F02003 		orr	r3, r3, #32
 1593 012a D360     		str	r3, [r2, #12]
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1594              		.loc 1 1191 0
 1595 012c 0020     		movs	r0, #0
 1596              	.LVL121:
 1597 012e 77E7     		b	.L137
 1598              	.LVL122:
 1599              	.L145:
1187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1600              		.loc 1 1187 0
 1601 0130 0268     		ldr	r2, [r0]
 1602 0132 1369     		ldr	r3, [r2, #16]
 1603              	.LVL123:
 1604 0134 43F02003 		orr	r3, r3, #32
 1605 0138 1361     		str	r3, [r2, #16]
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1606              		.loc 1 1191 0
 1607 013a 0020     		movs	r0, #0
 1608              	.LVL124:
 1609 013c 70E7     		b	.L137
 1610              		.cfi_endproc
 1611              	.LFE141:
 1613              		.section	.text.HAL_CAN_GetRxFifoFillLevel,"ax",%progbits
 1614              		.align	1
 1615              		.global	HAL_CAN_GetRxFifoFillLevel
 1616              		.syntax unified
 1617              		.thumb
 1618              		.thumb_func
 1619              		.fpu fpv4-sp-d16
 1621              	HAL_CAN_GetRxFifoFillLevel:
 1622              	.LFB142:
1201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
ARM GAS  /tmp/ccpbiI8S.s 			page 63


1204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
1207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
1211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1623              		.loc 1 1211 0
 1624              		.cfi_startproc
 1625              		@ args = 0, pretend = 0, frame = 0
 1626              		@ frame_needed = 0, uses_anonymous_args = 0
 1627              		@ link register save eliminated.
 1628              	.LVL125:
1212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t filllevel = 0U;
1213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1629              		.loc 1 1217 0
 1630 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1631 0004 DBB2     		uxtb	r3, r3
 1632 0006 012B     		cmp	r3, #1
 1633 0008 06D0     		beq	.L147
1218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1634              		.loc 1 1218 0 discriminator 1
 1635 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1636 000e DBB2     		uxtb	r3, r3
1217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1637              		.loc 1 1217 0 discriminator 1
 1638 0010 022B     		cmp	r3, #2
 1639 0012 01D0     		beq	.L147
1212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t filllevel = 0U;
 1640              		.loc 1 1212 0
 1641 0014 0020     		movs	r0, #0
 1642              	.LVL126:
1219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
1221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
1223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
1225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
1227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return Rx FIFO fill level */
1231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return filllevel;
1232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1643              		.loc 1 1232 0
 1644 0016 7047     		bx	lr
 1645              	.LVL127:
 1646              	.L147:
1220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1647              		.loc 1 1220 0
ARM GAS  /tmp/ccpbiI8S.s 			page 64


 1648 0018 21B1     		cbz	r1, .L151
1226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1649              		.loc 1 1226 0
 1650 001a 0368     		ldr	r3, [r0]
 1651 001c 1869     		ldr	r0, [r3, #16]
 1652              	.LVL128:
 1653 001e 00F00300 		and	r0, r0, #3
 1654              	.LVL129:
 1655 0022 7047     		bx	lr
 1656              	.LVL130:
 1657              	.L151:
1222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1658              		.loc 1 1222 0
 1659 0024 0368     		ldr	r3, [r0]
 1660 0026 D868     		ldr	r0, [r3, #12]
 1661              	.LVL131:
 1662 0028 00F00300 		and	r0, r0, #3
 1663              	.LVL132:
 1664 002c 7047     		bx	lr
 1665              		.cfi_endproc
 1666              	.LFE142:
 1668              		.section	.text.HAL_CAN_ActivateNotification,"ax",%progbits
 1669              		.align	1
 1670              		.global	HAL_CAN_ActivateNotification
 1671              		.syntax unified
 1672              		.thumb
 1673              		.thumb_func
 1674              		.fpu fpv4-sp-d16
 1676              	HAL_CAN_ActivateNotification:
 1677              	.LFB143:
1233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
1236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Interrupts management
1240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
1241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
1242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                        ##### Interrupts management #####
1244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
1246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
1251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
1252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Enable interrupts.
1256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
ARM GAS  /tmp/ccpbiI8S.s 			page 65


1260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1678              		.loc 1 1263 0
 1679              		.cfi_startproc
 1680              		@ args = 0, pretend = 0, frame = 0
 1681              		@ frame_needed = 0, uses_anonymous_args = 0
 1682              		@ link register save eliminated.
 1683              	.LVL133:
1264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
1266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1684              		.loc 1 1267 0
 1685 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1686 0004 DBB2     		uxtb	r3, r3
 1687 0006 012B     		cmp	r3, #1
 1688 0008 0AD0     		beq	.L153
1268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1689              		.loc 1 1268 0 discriminator 1
 1690 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1691 000e DBB2     		uxtb	r3, r3
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1692              		.loc 1 1267 0 discriminator 1
 1693 0010 022B     		cmp	r3, #2
 1694 0012 05D0     		beq	.L153
1269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Enable the selected interrupts */
1271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
1272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
1275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1695              		.loc 1 1279 0
 1696 0014 436A     		ldr	r3, [r0, #36]
 1697 0016 43F48023 		orr	r3, r3, #262144
 1698 001a 4362     		str	r3, [r0, #36]
1280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1699              		.loc 1 1281 0
 1700 001c 0120     		movs	r0, #1
 1701              	.LVL134:
1282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1702              		.loc 1 1283 0
 1703 001e 7047     		bx	lr
 1704              	.LVL135:
 1705              	.L153:
1271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1706              		.loc 1 1271 0
 1707 0020 0268     		ldr	r2, [r0]
 1708 0022 5369     		ldr	r3, [r2, #20]
ARM GAS  /tmp/ccpbiI8S.s 			page 66


 1709 0024 1943     		orrs	r1, r1, r3
 1710              	.LVL136:
 1711 0026 5161     		str	r1, [r2, #20]
1274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1712              		.loc 1 1274 0
 1713 0028 0020     		movs	r0, #0
 1714              	.LVL137:
 1715 002a 7047     		bx	lr
 1716              		.cfi_endproc
 1717              	.LFE143:
 1719              		.section	.text.HAL_CAN_DeactivateNotification,"ax",%progbits
 1720              		.align	1
 1721              		.global	HAL_CAN_DeactivateNotification
 1722              		.syntax unified
 1723              		.thumb
 1724              		.thumb_func
 1725              		.fpu fpv4-sp-d16
 1727              	HAL_CAN_DeactivateNotification:
 1728              	.LFB144:
1284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Disable interrupts.
1287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1729              		.loc 1 1294 0
 1730              		.cfi_startproc
 1731              		@ args = 0, pretend = 0, frame = 0
 1732              		@ frame_needed = 0, uses_anonymous_args = 0
 1733              		@ link register save eliminated.
 1734              	.LVL138:
1295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
1297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1735              		.loc 1 1298 0
 1736 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1737 0004 DBB2     		uxtb	r3, r3
 1738 0006 012B     		cmp	r3, #1
 1739 0008 0AD0     		beq	.L157
1299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1740              		.loc 1 1299 0 discriminator 1
 1741 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1742 000e DBB2     		uxtb	r3, r3
1298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1743              		.loc 1 1298 0 discriminator 1
 1744 0010 022B     		cmp	r3, #2
 1745 0012 05D0     		beq	.L157
1300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Disable the selected interrupts */
1302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
1303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccpbiI8S.s 			page 67


1304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
1306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1746              		.loc 1 1310 0
 1747 0014 436A     		ldr	r3, [r0, #36]
 1748 0016 43F48023 		orr	r3, r3, #262144
 1749 001a 4362     		str	r3, [r0, #36]
1311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1750              		.loc 1 1312 0
 1751 001c 0120     		movs	r0, #1
 1752              	.LVL139:
1313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1753              		.loc 1 1314 0
 1754 001e 7047     		bx	lr
 1755              	.LVL140:
 1756              	.L157:
1302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1757              		.loc 1 1302 0
 1758 0020 0268     		ldr	r2, [r0]
 1759 0022 5369     		ldr	r3, [r2, #20]
 1760 0024 23EA0101 		bic	r1, r3, r1
 1761              	.LVL141:
 1762 0028 5161     		str	r1, [r2, #20]
1305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1763              		.loc 1 1305 0
 1764 002a 0020     		movs	r0, #0
 1765              	.LVL142:
 1766 002c 7047     		bx	lr
 1767              		.cfi_endproc
 1768              	.LFE144:
 1770              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 1771              		.align	1
 1772              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 1773              		.syntax unified
 1774              		.thumb
 1775              		.thumb_func
 1776              		.fpu fpv4-sp-d16
 1778              	HAL_CAN_TxMailbox0CompleteCallback:
 1779              	.LFB146:
1315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
1325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
1326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
ARM GAS  /tmp/ccpbiI8S.s 			page 68


1327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
1328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
1329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
1330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
1331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
1334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != RESET)
1337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
1340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != RESET)
1342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
1344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
1346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
1348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != RESET)
1350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
1353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != RESET)
1355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
1358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else
1360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
1362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
1364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != RESET)
1370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
1373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != RESET)
1375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
1379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
1381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != RESET)
1383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
ARM GAS  /tmp/ccpbiI8S.s 			page 69


1384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
1386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != RESET)
1388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
1391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else
1393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
1395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
1397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != RESET)
1403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
1405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
1406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != RESET)
1408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
1412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
1414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != RESET)
1416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
1419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != RESET)
1421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
1424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else
1426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
1430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != RESET)
1437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != RESET)
1439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
ARM GAS  /tmp/ccpbiI8S.s 			page 70


1441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
1442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
1445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != RESET)
1450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != RESET)
1452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
1454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
1455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
1459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != RESET)
1464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check if message is still pending */
1466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != RESET)
1467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 0 mesage pending Callback */
1469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
1471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != RESET)
1476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != RESET)
1478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
1481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
1483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
1484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != RESET)
1489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != RESET)
1491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
1494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
ARM GAS  /tmp/ccpbiI8S.s 			page 71


1498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
1502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != RESET)
1503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check if message is still pending */
1505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != RESET)
1506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 1 mesage pending Callback */
1508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
1510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != RESET)
1515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != RESET)
1517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
1519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
1520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Sleep Callback */
1522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
1524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
1528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != RESET)
1529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != RESET)
1531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear WakeUp Flag */
1533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
1534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* WakeUp Callback */
1536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
1538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Error interrupts management *********************************************/
1542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != RESET)
1543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != RESET)
1545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Error Warning Flag */
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
1548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != RESET))
1549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Set CAN error code to Error Warning */
1551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
1552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
1554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
ARM GAS  /tmp/ccpbiI8S.s 			page 72


1555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Error Passive Flag */
1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
1558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != RESET))
1559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Set CAN error code to Error Passive */
1561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
1562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
1564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Bus-off Flag */
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
1568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != RESET))
1569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
1571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
1572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
1574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Last Error Code Flag */
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
1578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != RESET))
1579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
1581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_0):
1583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Stuff error */
1584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
1585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1):
1587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Form error */
1588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
1589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
1591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
1592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
1593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2):
1595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
1596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
1597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
1599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
1600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
1601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
1603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to CRC error */
1604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
1605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           default:
1607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Clear Last error code Flag */
1611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
ARM GAS  /tmp/ccpbiI8S.s 			page 73


1612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Clear ERRI Flag */
1616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
1617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
1620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
1621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code in handle */
1623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
1624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Call Error callback function */
1626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Call weak (surcharged) callback */
1627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
1628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
1633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
1636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief   CAN Callback functions
1637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
1638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
1639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                           ##### Callback functions #####
1641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
1643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     This subsection provides the following callback functions:
1644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
1645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
1646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
1647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
1648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
1649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
1650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
1651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
1652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
1653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
1654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
1655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
1656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
1657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
1659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
1660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
1664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
ARM GAS  /tmp/ccpbiI8S.s 			page 74


1669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1780              		.loc 1 1669 0
 1781              		.cfi_startproc
 1782              		@ args = 0, pretend = 0, frame = 0
 1783              		@ frame_needed = 0, uses_anonymous_args = 0
 1784              		@ link register save eliminated.
 1785              	.LVL143:
1670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
1675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1786              		.loc 1 1677 0
 1787 0000 7047     		bx	lr
 1788              		.cfi_endproc
 1789              	.LFE146:
 1791              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 1792              		.align	1
 1793              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 1794              		.syntax unified
 1795              		.thumb
 1796              		.thumb_func
 1797              		.fpu fpv4-sp-d16
 1799              	HAL_CAN_TxMailbox1CompleteCallback:
 1800              	.LFB147:
1678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
1681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
1686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1801              		.loc 1 1686 0
 1802              		.cfi_startproc
 1803              		@ args = 0, pretend = 0, frame = 0
 1804              		@ frame_needed = 0, uses_anonymous_args = 0
 1805              		@ link register save eliminated.
 1806              	.LVL144:
1687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
1692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1807              		.loc 1 1694 0
 1808 0000 7047     		bx	lr
 1809              		.cfi_endproc
 1810              	.LFE147:
 1812              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 1813              		.align	1
ARM GAS  /tmp/ccpbiI8S.s 			page 75


 1814              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 1815              		.syntax unified
 1816              		.thumb
 1817              		.thumb_func
 1818              		.fpu fpv4-sp-d16
 1820              	HAL_CAN_TxMailbox2CompleteCallback:
 1821              	.LFB148:
1695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
1698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
1703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1822              		.loc 1 1703 0
 1823              		.cfi_startproc
 1824              		@ args = 0, pretend = 0, frame = 0
 1825              		@ frame_needed = 0, uses_anonymous_args = 0
 1826              		@ link register save eliminated.
 1827              	.LVL145:
1704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
1709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1828              		.loc 1 1711 0
 1829 0000 7047     		bx	lr
 1830              		.cfi_endproc
 1831              	.LFE148:
 1833              		.section	.text.HAL_CAN_TxMailbox0AbortCallback,"ax",%progbits
 1834              		.align	1
 1835              		.weak	HAL_CAN_TxMailbox0AbortCallback
 1836              		.syntax unified
 1837              		.thumb
 1838              		.thumb_func
 1839              		.fpu fpv4-sp-d16
 1841              	HAL_CAN_TxMailbox0AbortCallback:
 1842              	.LFB149:
1712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
1715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
1720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1843              		.loc 1 1720 0
 1844              		.cfi_startproc
 1845              		@ args = 0, pretend = 0, frame = 0
 1846              		@ frame_needed = 0, uses_anonymous_args = 0
 1847              		@ link register save eliminated.
ARM GAS  /tmp/ccpbiI8S.s 			page 76


 1848              	.LVL146:
1721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
1726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1849              		.loc 1 1728 0
 1850 0000 7047     		bx	lr
 1851              		.cfi_endproc
 1852              	.LFE149:
 1854              		.section	.text.HAL_CAN_TxMailbox1AbortCallback,"ax",%progbits
 1855              		.align	1
 1856              		.weak	HAL_CAN_TxMailbox1AbortCallback
 1857              		.syntax unified
 1858              		.thumb
 1859              		.thumb_func
 1860              		.fpu fpv4-sp-d16
 1862              	HAL_CAN_TxMailbox1AbortCallback:
 1863              	.LFB150:
1729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
1732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
1737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1864              		.loc 1 1737 0
 1865              		.cfi_startproc
 1866              		@ args = 0, pretend = 0, frame = 0
 1867              		@ frame_needed = 0, uses_anonymous_args = 0
 1868              		@ link register save eliminated.
 1869              	.LVL147:
1738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
1743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1870              		.loc 1 1745 0
 1871 0000 7047     		bx	lr
 1872              		.cfi_endproc
 1873              	.LFE150:
 1875              		.section	.text.HAL_CAN_TxMailbox2AbortCallback,"ax",%progbits
 1876              		.align	1
 1877              		.weak	HAL_CAN_TxMailbox2AbortCallback
 1878              		.syntax unified
 1879              		.thumb
 1880              		.thumb_func
 1881              		.fpu fpv4-sp-d16
 1883              	HAL_CAN_TxMailbox2AbortCallback:
ARM GAS  /tmp/ccpbiI8S.s 			page 77


 1884              	.LFB151:
1746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
1749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
1754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1885              		.loc 1 1754 0
 1886              		.cfi_startproc
 1887              		@ args = 0, pretend = 0, frame = 0
 1888              		@ frame_needed = 0, uses_anonymous_args = 0
 1889              		@ link register save eliminated.
 1890              	.LVL148:
1755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
1760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1891              		.loc 1 1762 0
 1892 0000 7047     		bx	lr
 1893              		.cfi_endproc
 1894              	.LFE151:
 1896              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1897              		.align	1
 1898              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 1899              		.syntax unified
 1900              		.thumb
 1901              		.thumb_func
 1902              		.fpu fpv4-sp-d16
 1904              	HAL_CAN_RxFifo0MsgPendingCallback:
 1905              	.LFB152:
1763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
1766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
1771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1906              		.loc 1 1771 0
 1907              		.cfi_startproc
 1908              		@ args = 0, pretend = 0, frame = 0
 1909              		@ frame_needed = 0, uses_anonymous_args = 0
 1910              		@ link register save eliminated.
 1911              	.LVL149:
1772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
ARM GAS  /tmp/ccpbiI8S.s 			page 78


1777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1912              		.loc 1 1779 0
 1913 0000 7047     		bx	lr
 1914              		.cfi_endproc
 1915              	.LFE152:
 1917              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 1918              		.align	1
 1919              		.weak	HAL_CAN_RxFifo0FullCallback
 1920              		.syntax unified
 1921              		.thumb
 1922              		.thumb_func
 1923              		.fpu fpv4-sp-d16
 1925              	HAL_CAN_RxFifo0FullCallback:
 1926              	.LFB153:
1780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
1783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
1788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1927              		.loc 1 1788 0
 1928              		.cfi_startproc
 1929              		@ args = 0, pretend = 0, frame = 0
 1930              		@ frame_needed = 0, uses_anonymous_args = 0
 1931              		@ link register save eliminated.
 1932              	.LVL150:
1789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
1794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             file
1795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1933              		.loc 1 1796 0
 1934 0000 7047     		bx	lr
 1935              		.cfi_endproc
 1936              	.LFE153:
 1938              		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 1939              		.align	1
 1940              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 1941              		.syntax unified
 1942              		.thumb
 1943              		.thumb_func
 1944              		.fpu fpv4-sp-d16
 1946              	HAL_CAN_RxFifo1MsgPendingCallback:
 1947              	.LFB154:
1797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
1800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
ARM GAS  /tmp/ccpbiI8S.s 			page 79


1802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
1805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1948              		.loc 1 1805 0
 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 0
 1951              		@ frame_needed = 0, uses_anonymous_args = 0
 1952              		@ link register save eliminated.
 1953              	.LVL151:
1806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
1811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1954              		.loc 1 1813 0
 1955 0000 7047     		bx	lr
 1956              		.cfi_endproc
 1957              	.LFE154:
 1959              		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 1960              		.align	1
 1961              		.weak	HAL_CAN_RxFifo1FullCallback
 1962              		.syntax unified
 1963              		.thumb
 1964              		.thumb_func
 1965              		.fpu fpv4-sp-d16
 1967              	HAL_CAN_RxFifo1FullCallback:
 1968              	.LFB155:
1814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
1817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
1822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1969              		.loc 1 1822 0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 0
 1972              		@ frame_needed = 0, uses_anonymous_args = 0
 1973              		@ link register save eliminated.
 1974              	.LVL152:
1823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
1828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             file
1829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1975              		.loc 1 1830 0
 1976 0000 7047     		bx	lr
 1977              		.cfi_endproc
ARM GAS  /tmp/ccpbiI8S.s 			page 80


 1978              	.LFE155:
 1980              		.section	.text.HAL_CAN_SleepCallback,"ax",%progbits
 1981              		.align	1
 1982              		.weak	HAL_CAN_SleepCallback
 1983              		.syntax unified
 1984              		.thumb
 1985              		.thumb_func
 1986              		.fpu fpv4-sp-d16
 1988              	HAL_CAN_SleepCallback:
 1989              	.LFB156:
1831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Sleep callback.
1834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
1839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1990              		.loc 1 1839 0
 1991              		.cfi_startproc
 1992              		@ args = 0, pretend = 0, frame = 0
 1993              		@ frame_needed = 0, uses_anonymous_args = 0
 1994              		@ link register save eliminated.
 1995              	.LVL153:
1840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
1845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1996              		.loc 1 1846 0
 1997 0000 7047     		bx	lr
 1998              		.cfi_endproc
 1999              	.LFE156:
 2001              		.section	.text.HAL_CAN_WakeUpFromRxMsgCallback,"ax",%progbits
 2002              		.align	1
 2003              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 2004              		.syntax unified
 2005              		.thumb
 2006              		.thumb_func
 2007              		.fpu fpv4-sp-d16
 2009              	HAL_CAN_WakeUpFromRxMsgCallback:
 2010              	.LFB157:
1847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
1850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
1855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2011              		.loc 1 1855 0
 2012              		.cfi_startproc
 2013              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccpbiI8S.s 			page 81


 2014              		@ frame_needed = 0, uses_anonymous_args = 0
 2015              		@ link register save eliminated.
 2016              	.LVL154:
1856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
1861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2017              		.loc 1 1863 0
 2018 0000 7047     		bx	lr
 2019              		.cfi_endproc
 2020              	.LFE157:
 2022              		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 2023              		.align	1
 2024              		.weak	HAL_CAN_ErrorCallback
 2025              		.syntax unified
 2026              		.thumb
 2027              		.thumb_func
 2028              		.fpu fpv4-sp-d16
 2030              	HAL_CAN_ErrorCallback:
 2031              	.LFB158:
1864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Error CAN callback.
1867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
1872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2032              		.loc 1 1872 0
 2033              		.cfi_startproc
 2034              		@ args = 0, pretend = 0, frame = 0
 2035              		@ frame_needed = 0, uses_anonymous_args = 0
 2036              		@ link register save eliminated.
 2037              	.LVL155:
1873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
1878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2038              		.loc 1 1879 0
 2039 0000 7047     		bx	lr
 2040              		.cfi_endproc
 2041              	.LFE158:
 2043              		.section	.text.HAL_CAN_IRQHandler,"ax",%progbits
 2044              		.align	1
 2045              		.global	HAL_CAN_IRQHandler
 2046              		.syntax unified
 2047              		.thumb
 2048              		.thumb_func
 2049              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccpbiI8S.s 			page 82


 2051              	HAL_CAN_IRQHandler:
 2052              	.LFB145:
1323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2053              		.loc 1 1323 0
 2054              		.cfi_startproc
 2055              		@ args = 0, pretend = 0, frame = 0
 2056              		@ frame_needed = 0, uses_anonymous_args = 0
 2057              	.LVL156:
 2058 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2059              	.LCFI18:
 2060              		.cfi_def_cfa_offset 40
 2061              		.cfi_offset 3, -40
 2062              		.cfi_offset 4, -36
 2063              		.cfi_offset 5, -32
 2064              		.cfi_offset 6, -28
 2065              		.cfi_offset 7, -24
 2066              		.cfi_offset 8, -20
 2067              		.cfi_offset 9, -16
 2068              		.cfi_offset 10, -12
 2069              		.cfi_offset 11, -8
 2070              		.cfi_offset 14, -4
 2071 0004 0546     		mov	r5, r0
 2072              	.LVL157:
1325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2073              		.loc 1 1325 0
 2074 0006 0368     		ldr	r3, [r0]
 2075 0008 5C69     		ldr	r4, [r3, #20]
 2076              	.LVL158:
1326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2077              		.loc 1 1326 0
 2078 000a 5F68     		ldr	r7, [r3, #4]
 2079              	.LVL159:
1327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 2080              		.loc 1 1327 0
 2081 000c 9E68     		ldr	r6, [r3, #8]
 2082              	.LVL160:
1328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2083              		.loc 1 1328 0
 2084 000e D3F80C90 		ldr	r9, [r3, #12]
 2085              	.LVL161:
1329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2086              		.loc 1 1329 0
 2087 0012 D3F81080 		ldr	r8, [r3, #16]
 2088              	.LVL162:
1330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2089              		.loc 1 1330 0
 2090 0016 D3F818A0 		ldr	r10, [r3, #24]
 2091              	.LVL163:
1333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2092              		.loc 1 1333 0
 2093 001a 14F0010F 		tst	r4, #1
 2094 001e 5AD0     		beq	.L206
1336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2095              		.loc 1 1336 0
 2096 0020 16F0010F 		tst	r6, #1
 2097 0024 17D0     		beq	.L207
1339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccpbiI8S.s 			page 83


 2098              		.loc 1 1339 0
 2099 0026 0122     		movs	r2, #1
 2100 0028 9A60     		str	r2, [r3, #8]
1341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 2101              		.loc 1 1341 0
 2102 002a 16F0020F 		tst	r6, #2
 2103 002e 08D1     		bne	.L211
1349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2104              		.loc 1 1349 0
 2105 0030 16F0040F 		tst	r6, #4
 2106 0034 30D1     		bne	.L208
1354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2107              		.loc 1 1354 0
 2108 0036 16F0080F 		tst	r6, #8
 2109 003a 07D0     		beq	.L212
1357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2110              		.loc 1 1357 0
 2111 003c 4FF4805B 		mov	fp, #4096
 2112 0040 0BE0     		b	.L175
 2113              	.L211:
1345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 2114              		.loc 1 1345 0
 2115 0042 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback
 2116              	.LVL164:
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2117              		.loc 1 1324 0
 2118 0046 4FF0000B 		mov	fp, #0
 2119 004a 06E0     		b	.L175
 2120              	.LVL165:
 2121              	.L212:
1363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2122              		.loc 1 1363 0
 2123 004c FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback
 2124              	.LVL166:
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2125              		.loc 1 1324 0
 2126 0050 4FF0000B 		mov	fp, #0
 2127 0054 01E0     		b	.L175
 2128              	.LVL167:
 2129              	.L207:
 2130 0056 4FF0000B 		mov	fp, #0
 2131              	.LVL168:
 2132              	.L175:
1369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2133              		.loc 1 1369 0
 2134 005a 16F4807F 		tst	r6, #256
 2135 005e 0BD0     		beq	.L177
1372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2136              		.loc 1 1372 0
 2137 0060 2B68     		ldr	r3, [r5]
 2138 0062 4FF48072 		mov	r2, #256
 2139 0066 9A60     		str	r2, [r3, #8]
1374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 2140              		.loc 1 1374 0
 2141 0068 16F4007F 		tst	r6, #512
 2142 006c 17D1     		bne	.L213
1382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
ARM GAS  /tmp/ccpbiI8S.s 			page 84


 2143              		.loc 1 1382 0
 2144 006e 16F4806F 		tst	r6, #1024
 2145 0072 18D0     		beq	.L179
1385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2146              		.loc 1 1385 0
 2147 0074 4BF4005B 		orr	fp, fp, #8192
 2148              	.LVL169:
 2149              	.L177:
1402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2150              		.loc 1 1402 0
 2151 0078 16F4803F 		tst	r6, #65536
 2152 007c 2DD0     		beq	.L174
1405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2153              		.loc 1 1405 0
 2154 007e 2B68     		ldr	r3, [r5]
 2155 0080 4FF48032 		mov	r2, #65536
 2156 0084 9A60     		str	r2, [r3, #8]
1407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 2157              		.loc 1 1407 0
 2158 0086 16F4003F 		tst	r6, #131072
 2159 008a 16D1     		bne	.L214
1415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2160              		.loc 1 1415 0
 2161 008c 16F4802F 		tst	r6, #262144
 2162 0090 17D0     		beq	.L182
1418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2163              		.loc 1 1418 0
 2164 0092 4BF4004B 		orr	fp, fp, #32768
 2165              	.LVL170:
 2166 0096 20E0     		b	.L174
 2167              	.LVL171:
 2168              	.L208:
1352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2169              		.loc 1 1352 0
 2170 0098 4FF4006B 		mov	fp, #2048
 2171 009c DDE7     		b	.L175
 2172              	.LVL172:
 2173              	.L213:
1378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 2174              		.loc 1 1378 0
 2175 009e 2846     		mov	r0, r5
 2176 00a0 FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback
 2177              	.LVL173:
 2178 00a4 E8E7     		b	.L177
 2179              	.L179:
1387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2180              		.loc 1 1387 0
 2181 00a6 16F4006F 		tst	r6, #2048
 2182 00aa 02D0     		beq	.L180
1390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2183              		.loc 1 1390 0
 2184 00ac 4BF4804B 		orr	fp, fp, #16384
 2185              	.LVL174:
 2186 00b0 E2E7     		b	.L177
 2187              	.L180:
1396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2188              		.loc 1 1396 0
ARM GAS  /tmp/ccpbiI8S.s 			page 85


 2189 00b2 2846     		mov	r0, r5
 2190 00b4 FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback
 2191              	.LVL175:
 2192 00b8 DEE7     		b	.L177
 2193              	.L214:
1411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 2194              		.loc 1 1411 0
 2195 00ba 2846     		mov	r0, r5
 2196 00bc FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback
 2197              	.LVL176:
 2198 00c0 0BE0     		b	.L174
 2199              	.L182:
1420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2200              		.loc 1 1420 0
 2201 00c2 16F4002F 		tst	r6, #524288
 2202 00c6 02D0     		beq	.L183
1423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2203              		.loc 1 1423 0
 2204 00c8 4BF4803B 		orr	fp, fp, #65536
 2205              	.LVL177:
 2206 00cc 05E0     		b	.L174
 2207              	.L183:
1429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2208              		.loc 1 1429 0
 2209 00ce 2846     		mov	r0, r5
 2210 00d0 FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback
 2211              	.LVL178:
 2212 00d4 01E0     		b	.L174
 2213              	.LVL179:
 2214              	.L206:
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2215              		.loc 1 1324 0
 2216 00d6 4FF0000B 		mov	fp, #0
 2217              	.LVL180:
 2218              	.L174:
1436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2219              		.loc 1 1436 0
 2220 00da 14F0080F 		tst	r4, #8
 2221 00de 07D0     		beq	.L184
1438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2222              		.loc 1 1438 0
 2223 00e0 19F0100F 		tst	r9, #16
 2224 00e4 04D0     		beq	.L184
1441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2225              		.loc 1 1441 0
 2226 00e6 4BF4007B 		orr	fp, fp, #512
 2227              	.LVL181:
1444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2228              		.loc 1 1444 0
 2229 00ea 2B68     		ldr	r3, [r5]
 2230 00ec 1022     		movs	r2, #16
 2231 00ee DA60     		str	r2, [r3, #12]
 2232              	.L184:
1449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2233              		.loc 1 1449 0
 2234 00f0 14F0040F 		tst	r4, #4
 2235 00f4 02D0     		beq	.L185
ARM GAS  /tmp/ccpbiI8S.s 			page 86


1451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2236              		.loc 1 1451 0
 2237 00f6 19F0080F 		tst	r9, #8
 2238 00fa 60D1     		bne	.L215
 2239              	.L185:
1463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2240              		.loc 1 1463 0
 2241 00fc 14F0020F 		tst	r4, #2
 2242 0100 04D0     		beq	.L186
1466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2243              		.loc 1 1466 0
 2244 0102 2B68     		ldr	r3, [r5]
 2245 0104 DB68     		ldr	r3, [r3, #12]
 2246 0106 13F0030F 		tst	r3, #3
 2247 010a 5FD1     		bne	.L216
 2248              	.L186:
1475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2249              		.loc 1 1475 0
 2250 010c 14F0400F 		tst	r4, #64
 2251 0110 07D0     		beq	.L187
1477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2252              		.loc 1 1477 0
 2253 0112 18F0100F 		tst	r8, #16
 2254 0116 04D0     		beq	.L187
1480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2255              		.loc 1 1480 0
 2256 0118 4BF4806B 		orr	fp, fp, #1024
 2257              	.LVL182:
1483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2258              		.loc 1 1483 0
 2259 011c 2B68     		ldr	r3, [r5]
 2260 011e 1022     		movs	r2, #16
 2261 0120 1A61     		str	r2, [r3, #16]
 2262              	.L187:
1488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2263              		.loc 1 1488 0
 2264 0122 14F0200F 		tst	r4, #32
 2265 0126 02D0     		beq	.L188
1490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2266              		.loc 1 1490 0
 2267 0128 18F0080F 		tst	r8, #8
 2268 012c 52D1     		bne	.L217
 2269              	.L188:
1502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2270              		.loc 1 1502 0
 2271 012e 14F0100F 		tst	r4, #16
 2272 0132 04D0     		beq	.L189
1505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2273              		.loc 1 1505 0
 2274 0134 2B68     		ldr	r3, [r5]
 2275 0136 1B69     		ldr	r3, [r3, #16]
 2276 0138 13F0030F 		tst	r3, #3
 2277 013c 51D1     		bne	.L218
 2278              	.L189:
1514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2279              		.loc 1 1514 0
 2280 013e 14F4003F 		tst	r4, #131072
ARM GAS  /tmp/ccpbiI8S.s 			page 87


 2281 0142 02D0     		beq	.L190
1516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2282              		.loc 1 1516 0
 2283 0144 17F0100F 		tst	r7, #16
 2284 0148 4FD1     		bne	.L219
 2285              	.L190:
1528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2286              		.loc 1 1528 0
 2287 014a 14F4803F 		tst	r4, #65536
 2288 014e 02D0     		beq	.L191
1530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2289              		.loc 1 1530 0
 2290 0150 17F0080F 		tst	r7, #8
 2291 0154 50D1     		bne	.L220
 2292              	.L191:
1542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2293              		.loc 1 1542 0
 2294 0156 14F4004F 		tst	r4, #32768
 2295 015a 67D0     		beq	.L192
1544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2296              		.loc 1 1544 0
 2297 015c 17F0040F 		tst	r7, #4
 2298 0160 61D0     		beq	.L193
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != RESET))
 2299              		.loc 1 1547 0
 2300 0162 14F4807F 		tst	r4, #256
 2301 0166 04D0     		beq	.L194
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != RESET))
 2302              		.loc 1 1547 0 is_stmt 0 discriminator 1
 2303 0168 1AF0010F 		tst	r10, #1
 2304 016c 01D0     		beq	.L194
1551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2305              		.loc 1 1551 0 is_stmt 1
 2306 016e 4BF0010B 		orr	fp, fp, #1
 2307              	.LVL183:
 2308              	.L194:
1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != RESET))
 2309              		.loc 1 1557 0
 2310 0172 14F4007F 		tst	r4, #512
 2311 0176 04D0     		beq	.L195
1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != RESET))
 2312              		.loc 1 1557 0 is_stmt 0 discriminator 1
 2313 0178 1AF0020F 		tst	r10, #2
 2314 017c 01D0     		beq	.L195
1561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2315              		.loc 1 1561 0 is_stmt 1
 2316 017e 4BF0020B 		orr	fp, fp, #2
 2317              	.LVL184:
 2318              	.L195:
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != RESET))
 2319              		.loc 1 1567 0
 2320 0182 14F4806F 		tst	r4, #1024
 2321 0186 04D0     		beq	.L196
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != RESET))
 2322              		.loc 1 1567 0 is_stmt 0 discriminator 1
 2323 0188 1AF0040F 		tst	r10, #4
 2324 018c 01D0     		beq	.L196
ARM GAS  /tmp/ccpbiI8S.s 			page 88


1571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2325              		.loc 1 1571 0 is_stmt 1
 2326 018e 4BF0040B 		orr	fp, fp, #4
 2327              	.LVL185:
 2328              	.L196:
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != RESET))
 2329              		.loc 1 1577 0
 2330 0192 14F4006F 		tst	r4, #2048
 2331 0196 46D0     		beq	.L193
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != RESET))
 2332              		.loc 1 1577 0 is_stmt 0 discriminator 1
 2333 0198 1AF0700A 		ands	r10, r10, #112
 2334              	.LVL186:
 2335 019c 43D0     		beq	.L193
1580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2336              		.loc 1 1580 0 is_stmt 1
 2337 019e BAF1300F 		cmp	r10, #48
 2338 01a2 48D0     		beq	.L198
 2339 01a4 2FD9     		bls	.L221
 2340 01a6 BAF1500F 		cmp	r10, #80
 2341 01aa 47D0     		beq	.L202
 2342 01ac BAF1600F 		cmp	r10, #96
 2343 01b0 47D0     		beq	.L203
 2344 01b2 BAF1400F 		cmp	r10, #64
 2345 01b6 31D1     		bne	.L197
1596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2346              		.loc 1 1596 0
 2347 01b8 4BF0400B 		orr	fp, fp, #64
 2348              	.LVL187:
1597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 2349              		.loc 1 1597 0
 2350 01bc 2EE0     		b	.L197
 2351              	.LVL188:
 2352              	.L215:
1454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2353              		.loc 1 1454 0
 2354 01be 2B68     		ldr	r3, [r5]
 2355 01c0 0822     		movs	r2, #8
 2356 01c2 DA60     		str	r2, [r3, #12]
1458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2357              		.loc 1 1458 0
 2358 01c4 2846     		mov	r0, r5
 2359 01c6 FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback
 2360              	.LVL189:
 2361 01ca 97E7     		b	.L185
 2362              	.L216:
1470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2363              		.loc 1 1470 0
 2364 01cc 2846     		mov	r0, r5
 2365 01ce FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback
 2366              	.LVL190:
 2367 01d2 9BE7     		b	.L186
 2368              	.L217:
1493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2369              		.loc 1 1493 0
 2370 01d4 2B68     		ldr	r3, [r5]
 2371 01d6 0822     		movs	r2, #8
ARM GAS  /tmp/ccpbiI8S.s 			page 89


 2372 01d8 1A61     		str	r2, [r3, #16]
1497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2373              		.loc 1 1497 0
 2374 01da 2846     		mov	r0, r5
 2375 01dc FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback
 2376              	.LVL191:
 2377 01e0 A5E7     		b	.L188
 2378              	.L218:
1509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2379              		.loc 1 1509 0
 2380 01e2 2846     		mov	r0, r5
 2381 01e4 FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback
 2382              	.LVL192:
 2383 01e8 A9E7     		b	.L189
 2384              	.L219:
1519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2385              		.loc 1 1519 0
 2386 01ea 2B68     		ldr	r3, [r5]
 2387 01ec 1022     		movs	r2, #16
 2388 01ee 5A60     		str	r2, [r3, #4]
1523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2389              		.loc 1 1523 0
 2390 01f0 2846     		mov	r0, r5
 2391 01f2 FFF7FEFF 		bl	HAL_CAN_SleepCallback
 2392              	.LVL193:
 2393 01f6 A8E7     		b	.L190
 2394              	.L220:
1533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2395              		.loc 1 1533 0
 2396 01f8 2B68     		ldr	r3, [r5]
 2397 01fa 0822     		movs	r2, #8
 2398 01fc 5A60     		str	r2, [r3, #4]
1537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2399              		.loc 1 1537 0
 2400 01fe 2846     		mov	r0, r5
 2401 0200 FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback
 2402              	.LVL194:
 2403 0204 A7E7     		b	.L191
 2404              	.LVL195:
 2405              	.L221:
1580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2406              		.loc 1 1580 0
 2407 0206 BAF1100F 		cmp	r10, #16
 2408 020a 05D0     		beq	.L200
 2409 020c BAF1200F 		cmp	r10, #32
 2410 0210 04D1     		bne	.L197
1588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2411              		.loc 1 1588 0
 2412 0212 4BF0100B 		orr	fp, fp, #16
 2413              	.LVL196:
1589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 2414              		.loc 1 1589 0
 2415 0216 01E0     		b	.L197
 2416              	.L200:
1584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2417              		.loc 1 1584 0
 2418 0218 4BF0080B 		orr	fp, fp, #8
ARM GAS  /tmp/ccpbiI8S.s 			page 90


 2419              	.LVL197:
 2420              	.L197:
1611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 2421              		.loc 1 1611 0
 2422 021c 2A68     		ldr	r2, [r5]
 2423 021e 9369     		ldr	r3, [r2, #24]
 2424 0220 23F07003 		bic	r3, r3, #112
 2425 0224 9361     		str	r3, [r2, #24]
 2426              	.L193:
1616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 2427              		.loc 1 1616 0
 2428 0226 2B68     		ldr	r3, [r5]
 2429 0228 0422     		movs	r2, #4
 2430 022a 5A60     		str	r2, [r3, #4]
 2431              	.L192:
1620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2432              		.loc 1 1620 0
 2433 022c BBF1000F 		cmp	fp, #0
 2434 0230 0AD1     		bne	.L222
 2435              	.L173:
1629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2436              		.loc 1 1629 0
 2437 0232 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2438              	.LVL198:
 2439              	.L198:
1592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2440              		.loc 1 1592 0
 2441 0236 4BF0200B 		orr	fp, fp, #32
 2442              	.LVL199:
1593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 2443              		.loc 1 1593 0
 2444 023a EFE7     		b	.L197
 2445              	.L202:
1600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2446              		.loc 1 1600 0
 2447 023c 4BF0800B 		orr	fp, fp, #128
 2448              	.LVL200:
1601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 2449              		.loc 1 1601 0
 2450 0240 ECE7     		b	.L197
 2451              	.L203:
1604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2452              		.loc 1 1604 0
 2453 0242 4BF4807B 		orr	fp, fp, #256
 2454              	.LVL201:
1605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           default:
 2455              		.loc 1 1605 0
 2456 0246 E9E7     		b	.L197
 2457              	.L222:
1623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2458              		.loc 1 1623 0
 2459 0248 6B6A     		ldr	r3, [r5, #36]
 2460 024a 43EA0B03 		orr	r3, r3, fp
 2461 024e 6B62     		str	r3, [r5, #36]
1627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 2462              		.loc 1 1627 0
 2463 0250 2846     		mov	r0, r5
ARM GAS  /tmp/ccpbiI8S.s 			page 91


 2464 0252 FFF7FEFF 		bl	HAL_CAN_ErrorCallback
 2465              	.LVL202:
1629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2466              		.loc 1 1629 0
 2467 0256 ECE7     		b	.L173
 2468              		.cfi_endproc
 2469              	.LFE145:
 2471              		.section	.text.HAL_CAN_GetState,"ax",%progbits
 2472              		.align	1
 2473              		.global	HAL_CAN_GetState
 2474              		.syntax unified
 2475              		.thumb
 2476              		.thumb_func
 2477              		.fpu fpv4-sp-d16
 2479              	HAL_CAN_GetState:
 2480              	.LFB159:
1880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
1883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
1886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief   CAN Peripheral State functions
1887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
1888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
1889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             ##### Peripheral State and Error functions #####
1891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
1893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     This subsection provides functions allowing to :
1894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
1895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
1896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
1897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
1899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
1900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return the CAN state.
1904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL state
1907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
1909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2481              		.loc 1 1909 0
 2482              		.cfi_startproc
 2483              		@ args = 0, pretend = 0, frame = 0
 2484              		@ frame_needed = 0, uses_anonymous_args = 0
 2485              		@ link register save eliminated.
 2486              	.LVL203:
1910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2487              		.loc 1 1910 0
 2488 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2489 0004 DBB2     		uxtb	r3, r3
 2490              	.LVL204:
ARM GAS  /tmp/ccpbiI8S.s 			page 92


1911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 2491              		.loc 1 1912 0
 2492 0006 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 2493 000a D2B2     		uxtb	r2, r2
 2494 000c 012A     		cmp	r2, #1
 2495 000e 06D0     		beq	.L224
1913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2496              		.loc 1 1913 0 discriminator 1
 2497 0010 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 2498 0014 D2B2     		uxtb	r2, r2
1912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2499              		.loc 1 1912 0 discriminator 1
 2500 0016 022A     		cmp	r2, #2
 2501 0018 01D0     		beq	.L224
 2502              	.LVL205:
 2503              	.L225:
1914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
1916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
1917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Sleep mode is active */
1919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
1920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check sleep mode request flag */
1922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != RESET)
1923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Sleep mode request is pending */
1925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
1926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return CAN state */
1930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return state;
1931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2504              		.loc 1 1931 0
 2505 001a 1846     		mov	r0, r3
 2506              	.LVL206:
 2507 001c 7047     		bx	lr
 2508              	.LVL207:
 2509              	.L224:
1916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2510              		.loc 1 1916 0
 2511 001e 0268     		ldr	r2, [r0]
 2512 0020 5168     		ldr	r1, [r2, #4]
 2513 0022 11F0020F 		tst	r1, #2
 2514 0026 05D1     		bne	.L226
1922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2515              		.loc 1 1922 0
 2516 0028 1268     		ldr	r2, [r2]
 2517 002a 12F0020F 		tst	r2, #2
 2518 002e F4D0     		beq	.L225
1925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2519              		.loc 1 1925 0
 2520 0030 0323     		movs	r3, #3
 2521              	.LVL208:
 2522 0032 F2E7     		b	.L225
ARM GAS  /tmp/ccpbiI8S.s 			page 93


 2523              	.LVL209:
 2524              	.L226:
1919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2525              		.loc 1 1919 0
 2526 0034 0423     		movs	r3, #4
 2527              	.LVL210:
 2528 0036 F0E7     		b	.L225
 2529              		.cfi_endproc
 2530              	.LFE159:
 2532              		.section	.text.HAL_CAN_GetError,"ax",%progbits
 2533              		.align	1
 2534              		.global	HAL_CAN_GetError
 2535              		.syntax unified
 2536              		.thumb
 2537              		.thumb_func
 2538              		.fpu fpv4-sp-d16
 2540              	HAL_CAN_GetError:
 2541              	.LFB160:
1932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return the CAN error code.
1935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval CAN Error Code
1938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
1940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2542              		.loc 1 1940 0
 2543              		.cfi_startproc
 2544              		@ args = 0, pretend = 0, frame = 0
 2545              		@ frame_needed = 0, uses_anonymous_args = 0
 2546              		@ link register save eliminated.
 2547              	.LVL211:
1941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return CAN error code */
1942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return hcan->ErrorCode;
 2548              		.loc 1 1942 0
 2549 0000 406A     		ldr	r0, [r0, #36]
 2550              	.LVL212:
1943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2551              		.loc 1 1943 0
 2552 0002 7047     		bx	lr
 2553              		.cfi_endproc
 2554              	.LFE160:
 2556              		.section	.text.HAL_CAN_ResetError,"ax",%progbits
 2557              		.align	1
 2558              		.global	HAL_CAN_ResetError
 2559              		.syntax unified
 2560              		.thumb
 2561              		.thumb_func
 2562              		.fpu fpv4-sp-d16
 2564              	HAL_CAN_ResetError:
 2565              	.LFB161:
1944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Reset the CAN error code.
1947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
ARM GAS  /tmp/ccpbiI8S.s 			page 94


1949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
1952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2566              		.loc 1 1952 0
 2567              		.cfi_startproc
 2568              		@ args = 0, pretend = 0, frame = 0
 2569              		@ frame_needed = 0, uses_anonymous_args = 0
 2570              		@ link register save eliminated.
 2571              	.LVL213:
1953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
1954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 2572              		.loc 1 1955 0
 2573 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2574 0004 DBB2     		uxtb	r3, r3
 2575 0006 012B     		cmp	r3, #1
 2576 0008 0AD0     		beq	.L230
1956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2577              		.loc 1 1956 0 discriminator 1
 2578 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2579 000e DBB2     		uxtb	r3, r3
1955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2580              		.loc 1 1955 0 discriminator 1
 2581 0010 022B     		cmp	r3, #2
 2582 0012 05D0     		beq	.L230
1957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Reset CAN error code */
1959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode = 0U;
1960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2583              		.loc 1 1964 0
 2584 0014 436A     		ldr	r3, [r0, #36]
 2585 0016 43F48023 		orr	r3, r3, #262144
 2586 001a 4362     		str	r3, [r0, #36]
 2587              	.LVL214:
1965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     status = HAL_ERROR;
 2588              		.loc 1 1966 0
 2589 001c 0120     		movs	r0, #1
 2590              	.LVL215:
1967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return the status */
1970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
1971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2591              		.loc 1 1971 0
 2592 001e 7047     		bx	lr
 2593              	.LVL216:
 2594              	.L230:
1959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 2595              		.loc 1 1959 0
 2596 0020 0023     		movs	r3, #0
 2597 0022 4362     		str	r3, [r0, #36]
ARM GAS  /tmp/ccpbiI8S.s 			page 95


1953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2598              		.loc 1 1953 0
 2599 0024 1846     		mov	r0, r3
 2600              	.LVL217:
1959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 2601              		.loc 1 1959 0
 2602 0026 7047     		bx	lr
 2603              		.cfi_endproc
 2604              	.LFE161:
 2606              		.text
 2607              	.Letext0:
 2608              		.file 3 "/usr/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_default_types.
 2609              		.file 4 "/usr/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h"
 2610              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 2611              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 2612              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f405xx.h"
 2613              		.file 8 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2614              		.file 9 "/usr/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 2615              		.file 10 "/usr/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 2616              		.file 11 "/usr/bin/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 2617              		.file 12 "/usr/bin/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 2618              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2619              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 2620              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccpbiI8S.s 			page 96


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_can.c
     /tmp/ccpbiI8S.s:18     .text.HAL_CAN_MspInit:0000000000000000 $t
     /tmp/ccpbiI8S.s:25     .text.HAL_CAN_MspInit:0000000000000000 HAL_CAN_MspInit
     /tmp/ccpbiI8S.s:40     .text.HAL_CAN_Init:0000000000000000 $t
     /tmp/ccpbiI8S.s:47     .text.HAL_CAN_Init:0000000000000000 HAL_CAN_Init
     /tmp/ccpbiI8S.s:283    .text.HAL_CAN_MspDeInit:0000000000000000 $t
     /tmp/ccpbiI8S.s:290    .text.HAL_CAN_MspDeInit:0000000000000000 HAL_CAN_MspDeInit
     /tmp/ccpbiI8S.s:304    .text.HAL_CAN_ConfigFilter:0000000000000000 $t
     /tmp/ccpbiI8S.s:311    .text.HAL_CAN_ConfigFilter:0000000000000000 HAL_CAN_ConfigFilter
     /tmp/ccpbiI8S.s:511    .text.HAL_CAN_ConfigFilter:000000000000012c $d
     /tmp/ccpbiI8S.s:516    .text.HAL_CAN_Start:0000000000000000 $t
     /tmp/ccpbiI8S.s:523    .text.HAL_CAN_Start:0000000000000000 HAL_CAN_Start
     /tmp/ccpbiI8S.s:601    .text.HAL_CAN_Stop:0000000000000000 $t
     /tmp/ccpbiI8S.s:608    .text.HAL_CAN_Stop:0000000000000000 HAL_CAN_Stop
     /tmp/ccpbiI8S.s:688    .text.HAL_CAN_DeInit:0000000000000000 $t
     /tmp/ccpbiI8S.s:695    .text.HAL_CAN_DeInit:0000000000000000 HAL_CAN_DeInit
     /tmp/ccpbiI8S.s:745    .text.HAL_CAN_RequestSleep:0000000000000000 $t
     /tmp/ccpbiI8S.s:752    .text.HAL_CAN_RequestSleep:0000000000000000 HAL_CAN_RequestSleep
     /tmp/ccpbiI8S.s:795    .text.HAL_CAN_WakeUp:0000000000000000 $t
     /tmp/ccpbiI8S.s:802    .text.HAL_CAN_WakeUp:0000000000000000 HAL_CAN_WakeUp
     /tmp/ccpbiI8S.s:882    .text.HAL_CAN_WakeUp:0000000000000058 $d
     /tmp/ccpbiI8S.s:887    .text.HAL_CAN_IsSleepActive:0000000000000000 $t
     /tmp/ccpbiI8S.s:894    .text.HAL_CAN_IsSleepActive:0000000000000000 HAL_CAN_IsSleepActive
     /tmp/ccpbiI8S.s:939    .text.HAL_CAN_AddTxMessage:0000000000000000 $t
     /tmp/ccpbiI8S.s:946    .text.HAL_CAN_AddTxMessage:0000000000000000 HAL_CAN_AddTxMessage
     /tmp/ccpbiI8S.s:1123   .text.HAL_CAN_AbortTxRequest:0000000000000000 $t
     /tmp/ccpbiI8S.s:1130   .text.HAL_CAN_AbortTxRequest:0000000000000000 HAL_CAN_AbortTxRequest
     /tmp/ccpbiI8S.s:1199   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 $t
     /tmp/ccpbiI8S.s:1206   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 HAL_CAN_GetTxMailboxesFreeLevel
     /tmp/ccpbiI8S.s:1268   .text.HAL_CAN_IsTxMessagePending:0000000000000000 $t
     /tmp/ccpbiI8S.s:1275   .text.HAL_CAN_IsTxMessagePending:0000000000000000 HAL_CAN_IsTxMessagePending
     /tmp/ccpbiI8S.s:1322   .text.HAL_CAN_GetTxTimestamp:0000000000000000 $t
     /tmp/ccpbiI8S.s:1329   .text.HAL_CAN_GetTxTimestamp:0000000000000000 HAL_CAN_GetTxTimestamp
     /tmp/ccpbiI8S.s:1386   .text.HAL_CAN_GetRxMessage:0000000000000000 $t
     /tmp/ccpbiI8S.s:1393   .text.HAL_CAN_GetRxMessage:0000000000000000 HAL_CAN_GetRxMessage
     /tmp/ccpbiI8S.s:1614   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 $t
     /tmp/ccpbiI8S.s:1621   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 HAL_CAN_GetRxFifoFillLevel
     /tmp/ccpbiI8S.s:1669   .text.HAL_CAN_ActivateNotification:0000000000000000 $t
     /tmp/ccpbiI8S.s:1676   .text.HAL_CAN_ActivateNotification:0000000000000000 HAL_CAN_ActivateNotification
     /tmp/ccpbiI8S.s:1720   .text.HAL_CAN_DeactivateNotification:0000000000000000 $t
     /tmp/ccpbiI8S.s:1727   .text.HAL_CAN_DeactivateNotification:0000000000000000 HAL_CAN_DeactivateNotification
     /tmp/ccpbiI8S.s:1771   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/ccpbiI8S.s:1778   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccpbiI8S.s:1792   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/ccpbiI8S.s:1799   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccpbiI8S.s:1813   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/ccpbiI8S.s:1820   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccpbiI8S.s:1834   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 $t
     /tmp/ccpbiI8S.s:1841   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 HAL_CAN_TxMailbox0AbortCallback
     /tmp/ccpbiI8S.s:1855   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 $t
     /tmp/ccpbiI8S.s:1862   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 HAL_CAN_TxMailbox1AbortCallback
     /tmp/ccpbiI8S.s:1876   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 $t
     /tmp/ccpbiI8S.s:1883   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 HAL_CAN_TxMailbox2AbortCallback
     /tmp/ccpbiI8S.s:1897   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccpbiI8S.s:1904   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccpbiI8S.s:1918   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
ARM GAS  /tmp/ccpbiI8S.s 			page 97


     /tmp/ccpbiI8S.s:1925   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/ccpbiI8S.s:1939   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/ccpbiI8S.s:1946   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/ccpbiI8S.s:1960   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 $t
     /tmp/ccpbiI8S.s:1967   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 HAL_CAN_RxFifo1FullCallback
     /tmp/ccpbiI8S.s:1981   .text.HAL_CAN_SleepCallback:0000000000000000 $t
     /tmp/ccpbiI8S.s:1988   .text.HAL_CAN_SleepCallback:0000000000000000 HAL_CAN_SleepCallback
     /tmp/ccpbiI8S.s:2002   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 $t
     /tmp/ccpbiI8S.s:2009   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 HAL_CAN_WakeUpFromRxMsgCallback
     /tmp/ccpbiI8S.s:2023   .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/ccpbiI8S.s:2030   .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
     /tmp/ccpbiI8S.s:2044   .text.HAL_CAN_IRQHandler:0000000000000000 $t
     /tmp/ccpbiI8S.s:2051   .text.HAL_CAN_IRQHandler:0000000000000000 HAL_CAN_IRQHandler
     /tmp/ccpbiI8S.s:2472   .text.HAL_CAN_GetState:0000000000000000 $t
     /tmp/ccpbiI8S.s:2479   .text.HAL_CAN_GetState:0000000000000000 HAL_CAN_GetState
     /tmp/ccpbiI8S.s:2533   .text.HAL_CAN_GetError:0000000000000000 $t
     /tmp/ccpbiI8S.s:2540   .text.HAL_CAN_GetError:0000000000000000 HAL_CAN_GetError
     /tmp/ccpbiI8S.s:2557   .text.HAL_CAN_ResetError:0000000000000000 $t
     /tmp/ccpbiI8S.s:2564   .text.HAL_CAN_ResetError:0000000000000000 HAL_CAN_ResetError

UNDEFINED SYMBOLS
HAL_GetTick
